/**
 * @author Gopakumar V
 * This class is used to render overview page panel group. Each panel in the overview page will
 * be associated with group in the layout.
 */
$.Class('infaw.ldm.threeSixty.overviewPanelGroup', {}, {

    init: function (config) {
        var self = this;
        this._config = config;
        this._groupId = $.htmlId("panelGroup");
        this._subGroups = {};
        this._panels = {};

        var grpCntr = $("<div></div>").prop("id", this._groupId).addClass("overviewPanelGroup " + (this._config.cls ? this._config.cls : "")).appendTo(config.renderTo),
            accordionGroups = [],
            accordionGroupDiv,
            subGroupId,
            prevPanelHasHeader;
            
        $.each(config.panels, function (panelId, panelConfig) {
            panelConfig.hasHeader = panelConfig.hasHeader ? panelConfig.hasHeader : false;
            if (prevPanelHasHeader != panelConfig.hasHeader) {
                subGroupId = $.htmlId("panelSubGroup");
                accordionGroupDiv = $("<div></div>")
                    .addClass("panel-group accordionCntr")
                    .prop("id", subGroupId)
                    .appendTo(grpCntr);

                if (!self._subGroups[subGroupId]) {
                    self._subGroups[subGroupId] = [];
                }

            }
            try {
                self._panels[panelId] = self._renderPanel(panelConfig, accordionGroupDiv);
                self._subGroups[subGroupId].push(panelId);

                prevPanelHasHeader = panelConfig.hasHeader;
                if (panelConfig.hasHeader === false) {
                    accordionGroupDiv.removeClass("panel-group accordionCntr");
                    accordionGroupDiv.addClass("plainSubGroup");
                }
            } catch (e) {
                console.error("Failed to render panel " + panelId);
                console.error(e);
            }

        });

        this._handlePanelHidden();
    },

    /**
     * Returns panel configuration required to render a panel.
     */
    getPanelConfig: function (config, renderCntr) {
        var self = this;
        return {
            renderTo: renderCntr,
            hasHeader: config.hasHeader,
            cls: config.cls,
            objectInfo: this._config.objectInfo,
            editable: _.isBoolean(config.editable) ? config.editable : false,
            canRefresh: _.isBoolean(config.canRefresh) ? config.canRefresh : false,
            triggerEvent: this._config.triggerEvent,
            collapsible : _.isBoolean(config.collapsible) ? config.collapsible : true,
            collapsed :  _.isBoolean(config.collapsed) ? config.collapsed : false,
            onHide: function () {
                self._handlePanelHidden();
            },onExpand:function(){

                self._handleExpand();
            }
        };
    },
    _handleExpand:function(panelId){
        $.each(this._panels, function (panelId, panel) {
            if(panel && panelId != panelId) {
                panel._collapsePanel();
            }
        });
    },
    /**
     * @private
     * Used to render each panel.
     */
    _renderPanel: function (config, grpCntr) {
        var self = this,
            jsClass = $.toFunction(config.jsClass);

        if (jsClass) {
            return new jsClass(this.getPanelConfig(config, grpCntr));
        } else {
            console.error("Object Overview:: Invalid jsClass '" + config.jsClass + "' configured for panel");
        }
    },


    /**
     * @private
     * This function will be called when hide action is trigger on any panel in the group.
     * In case when all the panels are hidden the group will also be hidden.
     */
    _handlePanelHidden: function () {
        var isAllPanelHidden = true;
        /*for(var panelId in this._panels) {
            var eachPanel = this._panels[panelId];
            if(!eachPanel.isHidden()){
               isAllPanelHidden = false;
               break;
            }
        }*/

        for (var subGrpId in this._subGroups) {
            var panelsInSubGroup = this._subGroups[subGrpId],
                hideSubGroup = true;

            for (var x = 0; x < panelsInSubGroup.length; x++) {
                var panel = this._panels[panelsInSubGroup[x]];
                if (!panel.isHidden()) {
                    isAllPanelHidden = false;
                    hideSubGroup = false;
                    break;
                }
            }

            if (hideSubGroup) {
                $("#" + subGrpId).hide();
            } else {
                $("#" + subGrpId).show();
            }

        }

        if (isAllPanelHidden) {
            this.hide();
        } else {
            this.show();
        }
    },

    /**
     * Method to hide panel group.
     */
    hide: function () {
        $("#" + this._groupId).hide();
    },

    /**
     * Method to show panel group.
     */
    show: function () {
        $("#" + this._groupId).show();
    },

    /**
     * Method to refresh content with in the group.
     */
    refresh: function () {
        $.each(this._panels, function (panelId, panel) {
            if(panel) {
                panel.refresh();
            }
        });
    }
});