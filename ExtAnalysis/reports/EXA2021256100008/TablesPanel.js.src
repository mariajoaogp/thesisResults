infaw.extension.ldm.threeSixty.abstractPanel.extend('infaw.extension.ldm.threeSixty.TablesPanel', {}, {
    
    setTitle: function (cntr) {
        cntr.append("Data Sources");
    },

    setPanelContent: function (panelCntr) {
		var _that = this;
	var	objectInfo = this.getObjectInfo();

	this.getTablesContent(objectInfo).done(function(tables){
                var section = $("<div>").addClass("EICSectionContent").appendTo(panelCntr),
					li, ul = $("<ul>").appendTo(section);

						$.each(tables, function(i, table) {
							var id = table.id;
							if(table.name != null){
							infa.Eic.utils.getObjectIcon(table.classType, table.resourceType)
							.done(function(url){
									li = $("<li>").appendTo(ul);
									$("<span><img src=\"" + $.url("/"+url) + "\"></span>").appendTo(li);
									
									var a = $("<a class='eic-link' data-toggle='tooltip' title='"+ table.name.toUpperCase()+"'  target='_blank'>" + table.name.toUpperCase()+ "</a>").appendTo(li);

									a.data("objectInfo", {
															"id" : id,
															"type" : table.classType
														}
												);

									});
								}
					})
						
	})
    },

getTablesContent : function(ObjectInfo){
	var deferred = $.Deferred(),
		self = this;	

	if(ObjectInfo.getObjectType() !== "com.infa.ldm.tableau.Workbook"){
					self.fetchChildrenRelationshipData(ObjectInfo.getId()).then(function(tables){
						deferred.resolve(tables);
					})
	}else
	{
		this.fetchRelationshipData(ObjectInfo).then(function(tables){
			deferred.resolve(tables);
		})	
	}
	return deferred.promise();
},

fetchRelationshipData : function(objectInfo){
	var deferred = $.Deferred(),
	id = objectInfo.getId(),
	tables = [],
	dfRelationshipQuery = "/extension.eic.360.relationship?sourceId="+ RISON.urlencode(id) + "&relationships=core.DataFlow&direction=IN&depth=5";
	
	$.blockGetJson(dfRelationshipQuery).then(function(dfdata){
	var assetIdMap = [], dfDataMap = {}, visitedMap = {};
		dfdata = JSON.parse(dfdata);
		dfdata.items.forEach(function(item){
			dfDataMap[item.id] = item
		})

		function parseSrcObjects(srcObject, property, objectInfo, assetIdMap, visitedMap)
		{
			if(visitedMap[srcObject.id] || srcObject == undefined || srcObject.length == 0){
				return;      
			}
			else if(srcObject.resourceName !== objectInfo.getObjectSourceName()){
				assetIdMap[srcObject.id] = srcObject;
				return;      
			}
			else if(srcObject[property].length > 0){
				for(var i = 0; i < srcObject[property].length; i++){
					visitedMap[srcObject.id] = true;
					parseSrcObjects(dfDataMap[srcObject[property][i].id],property,objectInfo, assetIdMap,visitedMap)
				}
			}
		}

		parseSrcObjects(dfDataMap[id],"srcObjects", objectInfo, assetIdMap, visitedMap);

		var assets = Object.values(assetIdMap);
		deferred.resolve(assets);
	})
	return deferred.promise();
},

fetchChildrenRelationshipData : function(id){

	var deferred = $.Deferred(),
		assetsMap = {};
	var relQry = "/extension.eic.360.relationship?&sourceId=" + RISON.urlencode(id) + "&depth=-1&relationships=core.ParentChild&direction=OUT";
	//fetch the leaf level elements on which the lineage can be launched
	$.blockGetJson(relQry).then(function(data){
		data = JSON.parse(data);
		var leafIdMap = {}, visitedMap = {}, leafIds = [];

		data.items.forEach(function(item){
			leafIdMap[item.id] = item;
		})

		function parseDestObjects(destObject, property, leafIds, visitedMap){
			if(visitedMap[destObject.id] || destObject == undefined || destObject.length == 0){
				return;      
			}
			else if(destObject[property] && destObject[property].length == 0){
					leafIds.push(destObject.id);
					return;
				}
			else
				{
					visitedMap[destObject.id] = true;
					for(var i = 0; i < destObject[property].length; i++){
						parseDestObjects(leafIdMap[destObject[property][i].id],property, leafIds, visitedMap)
						}
				}
			}

		parseDestObjects(leafIdMap[id], "destObjects", leafIds, visitedMap);
		
		if(leafIds.length > 0){

		var leafIdsEncoded = leafIds.map(function(leafId){
			return RISON.urlencode(leafId);
		})
		var leafIdsString = "&sourceId=" + leafIdsEncoded.join("&sourceId="),
			dataFlowQry = "/extension.eic.360.relationship?"+leafIdsString+"&depth=5&relationships=core.DataFlow&direction=IN";
			// fetch the upstream lineage information of the leaf elements identified up to level 5
			$.blockGetJson(dataFlowQry).then(function(dfdata){
			var columnIdMap = [],
				relationshipDataMap = {};
				dfdata = JSON.parse(dfdata);
			dfdata.items.forEach(function(item){
			relationshipDataMap[item.id] = item
			})

			function parseSrcObjects(srcObject, property, leafObj, columnIdMap, visitedMap){
				var leafId = leafObj.id;
				if(visitedMap[srcObject.id] || srcObject == undefined || srcObject.length == 0 || columnIdMap[leafId] !== undefined){
					return;      
				}
				else if(srcObject.resourceName !== leafObj.resourceName){
					columnIdMap[leafId] = srcObject.id;
					return;      
				}
				else if(srcObject[property].length > 0){
					visitedMap[srcObject.id] = true;
				for(var i = 0; i < srcObject[property].length; i++){
					parseSrcObjects(relationshipDataMap[srcObject[property][i].id],property,leafObj, columnIdMap, visitedMap)
				}
				}
			}

			leafIds.forEach(function(leafId){
				var visitedMap={};				
				parseSrcObjects(relationshipDataMap[leafId],"srcObjects", relationshipDataMap[leafId], columnIdMap, visitedMap)
			})
		if(Object.keys(columnIdMap).length > 0){
		var parent,
			columnsConsidered =	Object.values(columnIdMap),
		columnsConsideredEncoded = columnsConsidered.map(function(column){
								return RISON.urlencode(column);
							})
		var	parentRelationshipString = "&sourceId=" + columnsConsideredEncoded.join("&sourceId="),
			parentChildQry = "/extension.eic.360.relationship?"+parentRelationshipString+"&depth=-1&relationships=core.ParentChild&direction=IN";
				$.blockGetJson(parentChildQry).then(function(pcdata){
					var parentChildDataMap = {};
						pcdata = JSON.parse(pcdata);
						pcdata.items.forEach(function(item){
					parentChildDataMap[item.id] = item
					})

					for(var i = 0; i<columnsConsidered.length; i++){
						parent = parentChildDataMap[parentChildDataMap[columnsConsidered[i]].srcObjects[0].id];						
						if(!assetsMap[parent.id]){		
							assetsMap[parent.id] = parent;
						}
					}
					var assets = Object.values(assetsMap);
					deferred.resolve(assets);
				})
			}
		})
	}
	})

	return deferred.promise();
}
});
