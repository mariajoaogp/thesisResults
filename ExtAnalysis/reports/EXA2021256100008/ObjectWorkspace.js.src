infaw.workspace.PaneledWorkspace.extend('infaw.ldm.ObjectWorkspace', {
	initialize: function(blockElementId, instanceId) {
		this._super(blockElementId, instanceId);
	},

    init : function() {
    	this._isFetching = {};
    	var resBundle = infaw.ldm.threeSixty.I18nResources;

        this.getColumnCount = function() {
            return 1;
        };

        this.openObject = function(objectInfo) {
			if(!objectInfo.whereFrom) {
				objectInfo.whereFrom = 'ldm.ThreeSixtyView';
			}

        	if(this._isFetching[objectInfo.id]) {
        		// We don't need to open the instance since the instance is opening right now
        		// We need this because user must have clicked on the object twice while it was still fetching the object
        		return;
        	} else if(this.isInstanceExists(objectInfo.id)) {
				this.selectInstance(objectInfo.id);
				var instance = this.getActiveInstance();
				if(instance) {
					instance.selectTab(objectInfo.whereFrom);
				}
			} else {
				var self = this;

				this._isFetching[objectInfo.id] = true;
				return $.when(self._fetchObject(objectInfo.id, objectInfo.type)).then(function (res) {
					self._isFetching[objectInfo.id] = false;
					if(!res || res.items.length === 0) {
						infaw.shell.common.Utils.showError(resBundle.label_error_fetching_object);
						return;
					}

					var ldmObject = new infaw.ldm.ThreeSixtyObject(objectInfo.id, res);
					return $.when(self.addInstance({
						instanceId : ldmObject.getHref(),
						instanceName: $.infa.Formats.escapeComprehensive(ldmObject.getObjectName()),
						whereFrom: objectInfo.whereFrom,
						type: ldmObject.getObjectType(),
						icon: ldmObject.getIcon(),
						sourceType : ldmObject.getObjectSource(),
						sourceName : ldmObject.getObjectSourceName()
					})).then(function(instanceDivId) {
						$('#' + instanceDivId).addClass('ldmPortletContainer');

						var objView = new infaw.ldm.threeSixty.objectView({
							renderTo : instanceDivId,
							objectInfo : ldmObject,
							workspaceId : self.getInstanceId(),
							whereFrom : objectInfo.whereFrom,
							workspace : self		
						});

						self.updateInstanceView(ldmObject.getHref(), objView);
					});
				});
			}
        };
    },

	_refreshObject: function(objectInfo) {
		var deferred = $.Deferred();
		$.when(self._fetchObject(objectInfo.id, objectInfo.type))
			.then(function (res) {
				deferred.resolve(new infaw.ldm.ThreeSixtyObject(objectInfo.id, res));
			});
		return deferred.promise();
	},

    _fetchObject: function(href, type) {
    	var query = '/web.ldm.360.fetch?' + RISON.urlencode(href);
    	if(type!=undefined && type.indexOf("com.infa.ldm")!=0){
    		query += '&relationships=core.ParentChild';
    	}
    	if(type && type === infa.ldm.Utils.CLASS_TYPE_SCHEMA) {
    		query += '&links=NONE';
    	}
		if( type && infa.ldm.Utils.getProfilableClassTypes().indexOf(type) >-1  ){
			query += "&includeSource=col-vfp-data-provider&includeSource=col-min-max-data-provider"
		}
    	return $.blockGetJSON(query).then(function(res) {
    		return res;
    	}).fail(function(jqXHR, textStatus, errorThrown) {
    		infaw.shell.common.Utils.showErrorFromResponse(infa.ldm.Utils.getErrorMessage(jqXHR, textStatus, errorThrown));
    	});
    },

    /**
	 * Called when browser history state changed (HTML5 History/State API)
	 * back & forward button - 'onpopstate' event)
	 * Can be deferred;
	 */
	onPopState: function(stateObj, oldStateObj) {
		var self = this;

		this._onPopState = true;
		this._super(stateObj, oldStateObj).done(function() {
			self._onPopState = false;
		});
	},
	_formatAndPushState: function(instance) {
		if(!this._onPopState) {
			var instanceId = instance.id,
				whereFrom = instance.options.whereFrom,
				type = instance.options.type,
				stateObj = this.getWorkspaceStateObj();
				instanceId = instanceId.replace(/\/\//g,'___');
			stateObj.$obj={$obj:instanceId,
					$where:whereFrom,
					$type:type
			}
			this.pushStateURL(stateObj);
		}
	},

    processStateURL: function(stateObj, onPopState) {
		var stateObject = RISON.parse(stateObj.$obj),
			objId = stateObject.$obj.replace(/___/g,'//'),
    		whereFrom = stateObject.$where,
    		type = stateObject.$type;
		if(objId) {
			this.openObject({
				id: objId,
				whereFrom: whereFrom,
				type: type
			});
		} else {
			// Remove workspace
			this._workspaceMgr.removeWorkspace(this._instanceId);
		}
    },

    removeInstance: function(instanceId) {
    	this._super(instanceId);

		this._dirtyMap[instanceId] = false;
		if(this.objInstances && this.objInstances.length === 0) {
			// Remove workspace
			this._workspaceMgr.removeWorkspace(this._instanceId);
    	}
    },

	beforeRemoveInstance: function(instanceId) {
		var instance = this.objInstancesMap[instanceId];
		if(instance){
			return instance.options.instanceView.destroy();
		}
	},

    onInstanceReenter: function(instanceId, instance) {
    	var state = this._dirtyMap[instanceId];
    	if(state) {
    		if (instance && instance.onReenter) {
    			instance.onReenter();
    		}

			if(state.enrich) {
				this._refreshCurrentView(true);
			} else if(state.dirty){
				this._refreshCurrentView();
			}
    	} else {
    		this._super(instanceId, instance);
    	}
    },

    registerEvents: function() {
		var self = this,
			eventMgr = this.getEventManager();

		this._super();
		this._dirtyMap = {};
		eventMgr.registerEvents({
			'onViewChange' :  function(event, instanceId, viewId) {
				var instance = self.objInstancesMap[instanceId];
				instance.options.whereFrom = viewId;

				self._formatAndPushState(instance);
			},
			'onConfigSaved':  function(event) {
				var objInstances = self.objInstances;
				if(objInstances) {
					for(var i = 0; i < objInstances.length; i++) {
						self._dirtyMap[objInstances[i].id] = {dirty: true};
					}
					self._refreshCurrentView();
				}
			},
			'onEnrichment': function(event, identities) {
				for(var i = 0; i < identities.length; i++) {
					if(self.objInstancesMap[identities[i]]) {
						self._dirtyMap[identities[i]] = {enrich: true, dirty: true};
					}
				}

				self._refreshCurrentView(true);
			},
			'onWorkspaceResize': function(){
				self._resizeCurrentView();
			}
		});
	},

	initializePortletContainer: function() {
    	return $.Deferred().resolve().promise();
    },

    _refreshCurrentView: function(enrich) {
		if(this._workspaceMgr.getActiveWorkspaceId() === this.getInstanceId()) {

			var instance = this.getActiveInstance(),
				instanceId = this.getActiveInstanceId(),
				workspaceEventManger = this.getEventManager();
			if(instance.refresh) {
				if(enrich) {
					$.when(this._fetchObject(instanceId)).then(function(res) {
						instance.refresh(res);
						workspaceEventManger.sendEvent('onViewRefresh', [enrich ? enrich : false, instanceId, res]);
					});
				} else {
					instance.refresh();
					workspaceEventManger.sendEvent('onViewRefresh', [enrich ? enrich : false, instanceId]);
				}
			}

			this._dirtyMap[instanceId] = null;
		}
    },

    _resizeCurrentView: function() {
		if(this._workspaceMgr.getActiveWorkspaceId() === this.getInstanceId()) {
			var instance = this.getActiveInstance();
			if(instance && $.isFunction(instance.onResize)){
				if($.isFunction(instance.getElement)){
					var $el = instance.getElement(),
						overflow = $el.css('overflow');
					$el.css('overflow', 'hidden');//Temp hide overflow of parent paneContainer
					instance.onResize();
					$el.css('overflow', overflow);
				} else
					instance.onResize();
			}
		}
    },

	getHelpId : function() {
		var instance = this.getActiveInstance();
    	if(instance && instance.getHelpId) {
    		return instance.getHelpId();
    	}
	}

});
