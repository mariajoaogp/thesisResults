$.Class('infa.ldm.Utils', {
        ATTR_CORE_NAME :"core.name",
        ATTR_CORE_DESCRIPTION :"core.description",
        ATTR_CORE_CLASSTYPE :"core.classType",
        ATTR_CORE_CLASSIFIERS :"core.classifiers",
        ATTR_CORE_DATATYPE : "com.infa.ldm.relational.Datatype",
        ATTR_CORE_LENGTH: "com.infa.ldm.relational.DatatypeLength",
        FILE_ATTR_CORE_LENGTH: "com.infa.ldm.file.DatatypeLength",
        ATTR_CORE_RESOURCETYPE :"core.resourceType",
        ATTR_CORE_RESOURCENAME :"core.resourceName",
        ATTR_CORE_LASTUPDATED :"core.lastModified",
        ATTR_CORE_LASTSCANSTATUS :"core.lastScanStatus",
        ATTR_CORE_LASTSCANDATE :"core.lastScanDate",
        ATTR_BG_SYNONYM : "com.infa.ldm.bg.synonyms",

        ATTR_PROFILING_ROWCOUNT : "com.infa.ldm.profiling.estimatedRowCount",
        ATTR_PROFILING_PROFILEROWCOUNT : "com.infa.ldm.profiling.profiledRowCount",
        ATTR_PROFILING_UNIQUEPERCENT : "com.infa.ldm.profiling.uniquePercent",
        ATTR_PROFILING_UNIQUECOUNT: 'com.infa.ldm.profiling.uniqueCount',
        ATTR_PROFILING_NONUNIQUEPERCENT : "com.infa.ldm.profiling.nonUniquePercent",
        ATTR_PROFILING_NONUNIQUECOUNT: 'com.infa.ldm.profiling.nonUniqueCount',
        ATTR_PROFILING_NULLCOUNT : "com.infa.ldm.profiling.nullCount",
        ATTR_PROFILING_NULLPERCENT : "com.infa.ldm.profiling.nullPercent",
        ATTR_PROFILING_DOMAIN : "com.infa.ldm.profiling.infDataDomain",
        ATTR_PROFILING_DOMAINNAMES : "com.infa.ldm.profiling.infDataDomainNames",
        ATTR_PROFILING_DOMAINCONFORMANCE: "com.infa.ldm.profiling.infDataDomainConfs",
        ATTR_PROFILING_DOMAINFREQUENCY : "com.infa.ldm.profiling.infDataDomainFreqs",
        ATTR_PROFILING_DOMAINACCEPTED : "com.infa.ldm.profiling.dataDomainsAccepted",
        ATTR_PROFILING_DOMAINREJECTED : "com.infa.ldm.profiling.dataDomainsRejected",
        ATTR_PROFILING_DOMAININFERRED : "com.infa.ldm.profiling.dataDomainsInferred",
        ATTR_PROFILING_DOMAINALL: "com.infa.ldm.profiling.dataDomainsAll",
        ASSOCIATION_PROFILING_DOMAINACCEPTED : "com.infa.ldm.profiling.DataDomainColumnAccepted",
        ASSOCIATION_PROFILING_DOMAININFERRED: "com.infa.ldm.profiling.DataDomainColumnInferred",
        ATTR_PROFILING_COMPOSITEDOMAINACCEPTED:"com.infa.ldm.profiling.compositeDomainsAccepted",
        ATTR_PROFILING_COMPOSITEDOMAININFERRED:"com.infa.ldm.profiling.compositeDomainsInferred",
        ATTR_PROFILING_COMPOSITEDOMAINREJECTED:"com.infa.ldm.profiling.compositeDomainsRejected",
        ATTR_PROFILING_COMPOSITEDOMAINALL:"com.infa.ldm.profiling.compositeDomainsAll",
        ATTR_PROFILING_ISDBE : "com.infa.ldm.profiling.isDBE",
        ATTR_PROFILING_DATATYPE : "com.infa.ldm.profiling.infDataType",
        ATTR_PROFILING_DATATYPENAMES : "com.infa.ldm.profiling.infDataTypeNames",
        ATTR_PROFILING_DATATYPECONFORMANCE : "com.infa.ldm.profiling.infDataTypeConfs",
        ATTR_PROFILING_DATATYPEFREQUENCY : "com.infa.ldm.profiling.infDataTypeFreqs",
        ATTR_PROFILING_PATTERN : "com.infa.ldm.profiling.pattern",
        ATTR_PROFILING_PATTERNNAMES : "com.infa.ldm.profiling.patternNames",
        ATTR_PROFILING_PATTERNCONFORMANCE : "com.infa.ldm.profiling.patternConfs",
        ATTR_PROFILING_PATTERNFREQUENCY : "com.infa.ldm.profiling.patternFreqs",
        ATTR_PROFILING_FILESIZE : "com.infa.ldm.profiling.fileSize",
        CLASSTYPE_TABLE : 'com.infa.ldm.relational.Table',
        CLASSTYPE_RESOURCE : 'core.Resource',
        BG_TERM: "com.infa.ldm.bg.BGTerm",
        BG_CATEGORY:"com.infa.ldm.bg.BGCategory",
        BG_GLOSSARY:"com.infa.ldm.bg.BGGlossary",
        BG_POLICY:"com.infa.ldm.bg.BGPolicy",
        CLASSTYPE_VIEW : 'com.infa.ldm.relational.View',
        CLASSTYPE_COLUMN: 'com.infa.ldm.relational.Column',
        CLASS_TYPE_SCHEMA : 'com.infa.ldm.relational.Schema',
        CLASSTYPE_VIEW_COLUMN: 'com.infa.ldm.relational.ViewColumn',
        CLASSTYPE_DOMAIN : 'com.infa.ldm.profiling.DataDomain',
        CLASSTYPE_DOMAIN_GROUP : 'com.infa.ldm.profiling.DataDomainGroup',
        CLASSTYPE_DOMAIN_COLUMNALL : 'com.infa.ldm.profiling.DataDomainColumnAll',
        CLASSTYPE_SYNONYM: 'com.infa.ldm.relational.Synonym',
        CLASSTYPE_USER : 'com.infa.ldm.isp.User',
        CLASSTYPE_SMART_TAG: 'com.infa.ldm.smarttag.SmartTag',
        RELATIONSHIP_USER : 'com.infa.ldm.isp.PrincipalReference',
        CLASSTYPE_UNSTRUCTUREDFILE:'com.infa.ldm.file.unstructured.UnstructuredFile',
        CLASSTYPE_DELIMITEDFILE : 'com.infa.ldm.file.delimited.DelimitedFile',
        CLASSTYPE_DELIMITEDFIELD : 'com.infa.ldm.file.delimited.DelimitedField',
        CLASSTYPE_XMLFILE : 'com.infa.ldm.file.xml.XMLFile',
        CLASSTYPE_XMLFILEFIELD : 'com.infa.ldm.file.xml.XMLField',
        CLASSTYPE_JSONFILE : 'com.infa.ldm.file.json.JSONFile',
        CLASSTYPE_JSONFILEFIELD :'com.infa.ldm.file.json.JSONField',
        CLASSTYPE_FOLDER: 'com.infa.ldm.file.Folder',
        CLASSTYPE_BG_TERM : 'com.infa.ldm.bg.BGTerm',
        CLASSTYPE_PUBLIC_SYNONYM : 'com.infa.ldm.relational.PublicSynonym',
        CLASSTYPE_COMPOSITEDOMAIN : 'com.infa.ldm.profiling.CompositeDomain',
        CLASSTYPE_UNSTRUCTUREDFILE: 'com.infa.ldm.file.unstructured.UnstructuredFile',
        CLASSTYPE_CSVFIELD: 'com.infa.ldm.file.csv.CSVField',
        CLASSTYPE_ADAPTERFIELD: 'com.infa.ldm.adapter.Field',
        CLASSTYPE_PUBLIC_SYNONYM_COLUMN: 'com.infa.ldm.relational.PublicSynonymColumn',
        CLASSTYPE_SYNONYM_COLUMN: 'com.infa.ldm.relational.SynonymColumn',

        ASSOCIATION_PUBLIC_SYNONYM : "com.infa.ldm.relational.TablePublicSynonym",
        ASSOCIATION_SYNONYM :'core.Synonym',
       // ASSOCIATION_BG_TERM : 'com.infa.ldm.bg.associatedTermsAgain',
       ASSOCIATION_BG_TERM : 'com.infa.ldm.bg.associatedTerms',
       ASSOCIATION_AXON_GLOSSARY: 'com.infa.ldm.axon.associatedGlossaries',
        DATATYPE_CORE_STRING :"core.String",
        DATATYPE_CORE_INTEGER :"core.Integer",
        DATATYPE_CORE_DECIMAL :"core.Decimal",
        DATATYPE_CORE_DATE : "core.Date",
        DATATYPE_CORE_BOOLEAN : "core.Boolean",
        DATATYPE_CORE_RICHTEXT : "core.RichText",
        DATATYPE_OOTB_URL:"com.infa.ldm.ootb.enrichments.URL",
        MSG_OOPS : "Something went wrong. Check the logs for more details.",
        MSG_OOPS_CONNECT : "Cannot connect to the Enterprise Information Catalog service. Check your network connection and try again.",
        SCHEMA_TABLE_ASSOCIATION :"com.infa.ldm.relational.SchemaTable",
        SCHEMA_VIEW_ASSOCIATION : "com.infa.ldm.relational.SchemaView",
        TABLE_SYNONYM_ASSOCIATION : 'com.infa.ldm.relational.TableSynonym',
        VIEW_SYNONYM_ASSOCIATION : 'com.infa.ldm.relational.ViewSynonym',
        GLOSSARY_TERM_ASSOCIATION:"com.infa.ldm.bg.BGGlossaryTerm",
        ASSOCIATION_GLOSSARY_POLICY:"com.infa.ldm.bg.BGGlossaryPolicy",
        ASSICIATION_GLOAARY_CATEGORY:"com.infa.ldm.bg.BGGlossaryCategory",
        GLOSSARY_TYPE :"com.infa.ldm.bg.BGGlossary",
        TERM_BASE_FACT :"com.infa.ldm.bg.associatedTermsBase",
        AXON_BASE_FACT: "com.infa.ldm.axon.associatedGlossariesBase",
        ENRICHED_NAME: "com.infa.ldm.ootb.enrichments.displayName",

        TERM_TERM_ASSOCIATION:"com.infa.ldm.bg.BGTermTermRelationship",
        TERM_CATEGORY_ASSOCIATION:"com.infa.ldm.bg.BGTermCategoryRelationship",
        ASSOCITION_SCHEMA_DATABASE :"com.infa.ldm.relational.DatabaseSchema",
        ANALYST_URL_FACT:"com.infa.ldm.bg.url",
        FORMATTET_URL_FACT: "com.infa.ldm.bg.formattedExample",
        REFERENCE_TABLE_FACT: "com.infa.ldm.bg.referenceTableURL",
        FORMATTED_DESCRIPTION_FACT : "com.infa.ldm.bg.formattedDescription",
        FACT_BG_OWNER:"com.infa.ldm.bg.owner",
        FACT_BG_STEWARD:"com.infa.ldm.bg.steward",
        FACT_BG_STAKEHOLDER:"com.infa.ldm.bg.stakeHolders",
        FACT_BG_USAGE_CONTEXT:"com.infa.ldm.bg.formattedUsageContext",
        FACT_BG_RULEINTENT:"com.infa.ldm.bg.ruleIntent",
        //POWER CENTER CLASSES
        CLASSTYPE_PC_MAPPINGS : 'com.infa.ldm.etl.pc.Mapping',
        CLASSTYPE_CN_OPERATION : 'com.infa.ldm.clouderanavigator.Operation',
        CLASSTYPE_PC_EXPRESSION : "com.infa.ldm.etl.pc.Expression",
        CLASSTYPE_PC_FILTER : "com.infa.ldm.etl.pc.Filter",
        CLASSTYPE_PC_AGGREGATOR : "com.infa.ldm.etl.pc.Aggregator",
        CLASSTYPE_PC_DATAMASKING : "com.infa.ldm.etl.pc.DataMasking",
        CLASSTYPE_PC_JOINER : "com.infa.ldm.etl.pc.Joiner",
        CLASSTYPE_PC_MAPPLET : "com.infa.ldm.etl.pc.Mapplet",
        CLASSTYPE_PC_ROUTER : "com.infa.ldm.etl.pc.Router",
        CLASSTYPE_PC_SORTER : "com.infa.ldm.etl.pc.Sorter",
        CLASSTYPE_PC_SOURCE : "com.infa.ldm.etl.pc.Source",
        CLASSTYPE_PC_SOURCEQUALIFIER : "com.infa.ldm.etl.pc.SourceQualifier",
        CLASSTYPE_PC_TARGET : "com.infa.ldm.etl.pc.Target",
        CLASSTYPE_PC_UNION : "com.infa.ldm.etl.pc.Union",
        CLASSTYPE_PC_SEQUENCE : "com.infa.ldm.etl.pc.Sequence",
        CLASSTYPE_PC_LOOKUP : "com.infa.ldm.etl.pc.Lookup",

        SCANNER_IMAGE_LOCATION : "res/img/scanners/",
        ATTR_SECURE_AT_SOURCE: "com.infa.ldm.apps.secureatsource",

        CLASSTYPE_ERWIN_TABLE:"com.infa.ldm.erwin.Table",
        CLASSTYPE_ERWIN_TABLE_ENTITY:"com.infa.ldm.erwin.TableEntity",
        CLASSTYPE_ERWIN_VIEW:"com.infa.ldm.erwin.View",
        CLASSTYPE_ERWIN_ENTITY:"com.infa.ldm.erwin.Entity",
        CLASSTYPE_ERWIN_SYNONYM:"com.infa.ldm.erwin.Synonym",
        AXON_GLOSSARY:"com.infa.ldm.axon.AxonGlossary",

		//EBF-19618
		ATTR_CORE_CERTIFICATION:"com.infa.ldm.entity.collaboration.certified",
        EIC_CUSTOM_ATTRIBUTE_BLACKLIST: ["com.infa.ldm.ootb.enrichments.assetLocationBase"],

        _instance : undefined,

        instance : function(){
            if (!infa.ldm.Utils._instance) {
                infa.ldm.Utils._instance = new infa.ldm.Utils();
            }
            return infa.ldm.Utils._instance;
        },

        hiddenAttributes: {
            'core.runIds': true,
            'core.relatedCount':true
        },

        /**
         * Hidden in 360 has to be unique from shown attributes
         */
        isHiddenByDefault: function(attributeId) {
            return this.hiddenAttributes[attributeId] ? true : false;
        },

        shownAttributes: {
            'core.resourceName': true,
            'com.infa.ldm.isp.datasetCreatedByBase' : true,
            'com.infa.ldm.isp.datasetUsedByBase' : true,
            'com.infa.ldm.isp.datasetModifiedByBase' : true,
            'com.infa.ldm.profiling.DataDomainColumnAll':true
            },

        /**
         * Shown in Search/Facets has to be unique from hidden by default
         */
        isShownByDefault: function(attributeId) {
            return this.shownAttributes[attributeId] ? true : false;
        },

        getCoreAttributes : function() {
            return [infa.ldm.Utils.ATTR_CORE_NAME,
                    infa.ldm.Utils.ATTR_CORE_DESCRIPTION,
                    infa.ldm.Utils.ATTR_CORE_CLASSTYPE,
                    infa.ldm.Utils.ATTR_CORE_RESOURCETYPE,
                    infa.ldm.Utils.ATTR_CORE_LASTUPDATED,
                    infa.ldm.Utils.ATTR_PROFILING_ROWCOUNT]
        },

        getProfilableClassTypes: function(){
            return [infa.ldm.Utils.CLASSTYPE_VIEW_COLUMN,
                    infa.ldm.Utils.CLASSTYPE_SYNONYM_COLUMN,
                    infa.ldm.Utils.CLASSTYPE_PUBLIC_SYNONYM_COLUMN,
                    infa.ldm.Utils.CLASSTYPE_COLUMN,
                    infa.ldm.Utils.CLASSTYPE_DELIMITEDFIELD,
                    infa.ldm.Utils.CLASSTYPE_XMLFILEFIELD,
                    infa.ldm.Utils.CLASSTYPE_JSONFILEFIELD,
                    infa.ldm.Utils.CLASSTYPE_ADAPTERFIELD,
                    infa.ldm.Utils.CLASSTYPE_UNSTRUCTUREDFILE]
        },

        getProfilableClassTypesMap: function(){
            var obj = {};
            infa.ldm.Utils.getProfilableClassTypes().forEach(function(classType){
                obj[classType] = true;
            })
            return obj;
        },

        isNumericType : function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_INTEGER
                    || attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_DECIMAL;
        },

        isDecimalType: function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_DECIMAL;
        },

        isIntegerType: function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_INTEGER;
        },

        isDateType : function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_DATE;
        },

        isBooleanType: function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_BOOLEAN;
        },

        isStringType: function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_STRING;
        },
        isRichTextDataType: function(attribute) {
            return attribute.dataType.id === infa.ldm.Utils.DATATYPE_CORE_RICHTEXT;
        },
        isClassifier : function(attribute) {
            return attribute && attribute.referenceClassData;
        },

        isClassifierType: function(typeId) {
            var def =  $.Deferred();
            $.when(infa.eic.AppConfigData.instance().getType(typeId)).done(function(type){
            if(type && type.superClasses && type.superClasses.length > 0 && type.superClasses[0].id === 'core.Classifier') {
                def.resolve(true);
            }
            def.resolve(false);
            });
            return def;
        },

        getObjectType : function (props) {
            if (props && props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE]) {
                if(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].value) {
                    return props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].value;
                }
                return (infa.ldm.Utils.getValue(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].values));
            }

            return undefined;
        },

        getIcon: function(props) {
            if (props && props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE]) {
                if(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].value) {
                    return this.getIconByType(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].value);
                }
                return this.getIconByType(infa.ldm.Utils.getValue(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].values));
            }
        },

        getIconByType: function(classType,resourceType) {
            var name = "",
                imagePath = 'default',
                def = $.Deferred();
            if(this.isReport(classType) && classType !== 'com.infa.ldm.tableau.Workbook') {
                name = "Report";
            } else if(this.isBusinessTerm(classType)) {
                name = "BGTerm";
            } else if(classType=="core.Resource" && resourceType=="Axon"){
                name= "AxonResource";
            }
            if(name != ""){
                def.resolve( infa.ldm.Utils.SCANNER_IMAGE_LOCATION + imagePath +  "/" + name+".svg");
            }else{
                infa.eic.AppConfigData.instance().getObjectDetails(classType).done(function(obj){
                    if(obj) {
                        name = obj.name;
                        var package = obj.packageName;
    
                        if(package) {
                            name = obj.name.replace(package+".", "");
                            imagePath = package.replace(/\./g,"_");
                        }
                        def.resolve(infa.ldm.Utils.SCANNER_IMAGE_LOCATION+imagePath+"/"+name+".svg");
                    }
                    def.resolve(infa.ldm.Utils.SCANNER_IMAGE_LOCATION+imagePath+  "/" + "Generic.svg");
                });  
            }
            return def;
        },
        
        getObjectName : function (props) {
            if (props && props[infa.ldm.Utils.ATTR_CORE_NAME]) {
                if(props[infa.ldm.Utils.ATTR_CORE_NAME].value) {
                    return props[infa.ldm.Utils.ATTR_CORE_NAME].value;
                }
                return (infa.ldm.Utils.getValue(props[infa.ldm.Utils.ATTR_CORE_NAME].values));
            }

            return undefined;
        },

        getObjectDescription : function (props) {
            if (props && props[infa.ldm.Utils.ATTR_CORE_DESCRIPTION]) {
                if(props[infa.ldm.Utils.ATTR_CORE_DESCRIPTION].value) {
                    return props[infa.ldm.Utils.ATTR_CORE_DESCRIPTION].value;
                }
                return (infa.ldm.Utils.getValue(props[infa.ldm.Utils.ATTR_CORE_DESCRIPTION].values));
            }

            return undefined;
        },

        getProp : function (props, propName) {
            if (props && props[propName]) {
                if(props[propName].value) {
                    return infa.ldm.Utils.getModeledName(props[propName].value);
                } else {
                    return infa.ldm.Utils.getModeledName(infa.ldm.Utils.getValue(props[propName].values).toString());
                }
            }

            return "";
        },

        getModeledName : function(qualName) {
            if(typeof qualName != 'string') {
                return qualName;
            }
            if (qualName.indexOf("com.infa.ldm.relational") >= 0) {
                return qualName.substring("com.infa.ldm.relational".length + 1, qualName.length);
            }
            else if (qualName.indexOf("com.infa.ldm.catalog") >= 0) {
                return qualName.substring("com.infa.ldm.catalog".length + 1, qualName.length);
            }
            else if (qualName.indexOf("com.infa.ldm.profiling") >= 0) {
                return qualName.substring("com.infa.ldm.profiling".length + 1, qualName.length);
            }
            else if (qualName.indexOf("core") >= 0) {
                return qualName.substring("core".length + 1, qualName.length);
            }
            return qualName;
        },

        isDataset : function(props) {
            if (props && props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE]) {
                if(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].value) {
                    var classType = infa.ldm.Utils.isDatasetType(classType);
                }
                var classType = (infa.ldm.Utils.getValue(props[infa.ldm.Utils.ATTR_CORE_CLASSTYPE].values));
            }

            return infa.ldm.Utils.isDatasetType(classType);
        },

        isDatasetType : function(propName) {
            return propName === infa.ldm.Utils.CLASSTYPE_TABLE || propName === infa.ldm.Utils.CLASSTYPE_VIEW;
        },

        isModelType : function(type, parentType) {
            var isModel = false,
                appConfigDataInst = infa.eic.AppConfigData.instance(),
                typeObj = appConfigDataInst.getType(type);

            if(typeObj && typeObj.superClasses && typeObj.superClasses.length > 0) {
                for(var i=0; i < typeObj.superClasses.length; i++) {
                    var superClass = typeObj.superClasses[i];
                    if(superClass.id == parentType) {
                        isModel = true;
                        break;
                    }
                }
            }
            return isModel;
        },

        isCoreType : function(propName) {
            for (var index=0; index < infa.ldm.Utils.getCoreAttributes().length; index++) {
                if (propName === infa.ldm.Utils.getCoreAttributes()[index]) {
                    return true;
                }
            }
        },

        isBusinessTerm: function(type) {
            return (type && type.indexOf('com.infa.ldm.bgresource') !== -1);
        },

        isReport: function(type) {
            switch(type) {
                case 'com.infa.ldm.businessobject.WebIntelligenceDocument':
                case 'com.infa.ldm.businessobject.DesktopIntelligenceDocument':
                case 'com.infa.ldm.businessobject.CrystalReport':
                case 'com.infa.ldm.businessobject.AnalyticReport':
                case 'com.infa.ldm.tableau.Workbook':
                case 'com.infa.ldm.cognos.Report':
                case 'com.infa.ldm.mstr.ReportGrid':
                case 'com.infa.ldm.mstr.ReportGraph':
                case 'com.infa.ldm.obiee.Report':
                    return true;
                default:
                    return false;
            }
        },

        isBIObject : function(name){
            switch(name) {
                case 'IBM Cognos':
                case 'MicroStrategy':
                case 'Oracle Business Intelligence':
                case 'SAP Business Objects':
                case 'Tableau Server':
                case 'Qlik Sense':
                    return true;
                default:
                    return false;
            }
        },

        isColumn : function(type) {
            return type.toLowerCase().indexOf('column') >= 0;
        },

        isProfileRowCount: function(attr) {
            return (attr === infa.ldm.Utils.ATTR_PROFILING_ROWCOUNT ||
                attr === infa.ldm.Utils.ATTR_PROFILING_PROFILEROWCOUNT);
        },

        isPrecision: function(attr) {
            return (attr === infa.ldm.Utils.ATTR_CORE_LENGTH);
        },

        getFriendlyName : function(cryptic) {
            var _map = [
                {c : "description", f : "Description"},
                {c : "rowCount", f : "Row Count"},
                {c : "nullCount", f : "Null Count"},
                {c : "uniqueCount", f : "Unique Count"},
                {c : "uniquePercent", f : "Unique Percent"},
                {c : "patternNames", f : "Pattern Names"},
                {c : "patternFreqs", f : "Pattern Frequencies"},
                {c : "patternConfs", f : "Pattern Conformance Percentage"},
                {c : "infDataTypeNames", f : "Inferred Data Type Names"},
                {c : "infDataTypeFreqs", f : "Inferred Data Type Frequencies"},
                {c : "infDataTypeConfs", f : "Inferred Data Type Conformance Percentage"},
                {c : "infDataDomainNames", f : "Inferred Data Domain Names"},
                {c : "infDataDomainFreqs", f : "Inferred Data Domain Frequencies"},
                {c : "infDataDomainConfs", f : "Inferred Data Domain Conformance Percentage"},
                {c : "core.PkFkRelatedDataSets", f : "PK-FK relationship"},
                {c : "true", f : "Yes"},
                {c : "false", f : "No"}
            ];

            for (var key in _map) {
                if (_map[key].c === infa.ldm.Utils.getModeledName(cryptic)) {
                    return _map[key].f;
                }
            }

            return cryptic;
        },

        getRelationshipName : function(cryptic) {
            var _map = [
                {c : "core.PkFkRelatedDataSets", f : "PK-FK relationship"},
                {c : "com.infa.ldm.profiling.ColumnDataDomain", f : "Data Domain relationship" },
                {c : "com.infa.ldm.profiling.TableDataDomain", f : "Data Domain relationship" },
                {c : "com.infa.ldm.isp.PrincipalReference", f : "Principal Reference" },
                {c : "com.infa.ldm.similarity.SimilarColumn", f : "Similar Column" },
                {c : "com.infa.ldm.profiling.DataDomainTable", f : "Data Domain relationship" }

            ];

            for (var key in _map) {
                if (_map[key].c === cryptic) {
                    return _map[key].f;
                }
            }

            return cryptic;
        },

        getValue : function(val, justOne) {
            if (typeof val === 'object' && val.length) {
                if (justOne) {
                    return val[0];
                }
                return val.join(", ");
            }
            return val;
        },

        getEmptyMessage : function() {
            return "No available data";
        },

        showErrorMessage : function(resp){
            var $dialog = $('<div></div>').infaDialog({
                title: "Error",
                closeOnEscape: true,
                buttonLabels: {
                    OK:"OK"
                },
                buttons: {
                    OK: function(e) {
                        var dialog = $.getWidget($(this), 'infaDialog');
                        dialog.destroy();
                    }
                },
                width:400
            });
            $("<div/>").text(resp).appendTo($dialog);
            $dialogwidget = $.getWidget($dialog,"infaDialog");
            $dialogwidget.open();
        },

        getErrorMessage : function(jqXHR, errorStatus, errorThrown) {
            if (!jqXHR ||  !jqXHR.responseText) {
                return errorThrown;
            }

            var msg;
            try {
                var obj = JSON.parse(jqXHR.responseText);
                if (obj.errorCode === "infa.ldm.CONNECT_ERROR") {
                    return '<p style="color:gray;">"' + infa.ldm.Utils.MSG_OOPS_CONNECT + '"</p>';
                }

                msg = obj.description;

                // check the message for details
                try {
                    msg = JSON.parse(msg);
                    if (msg.message) {
                        return infa.ldm.Utils.MSG_OOPS + '<br><p style="color:gray;">"' + $.infa.Formats.escapeComprehensive(msg.message) + '"</p>';
                    }
                } catch (e) {
                    return infa.ldm.Utils.MSG_OOPS + '<br><p style="color:gray;">"' +  $.infa.Formats.escapeComprehensive(msg) + '"</p>';
                }
                return  $.infa.Formats.escapeComprehensive(infa.ldm.Utils.MSG_OOPS);
            } catch (e) {
                msg = jqXHR.statusText || jqXHR;
            }
            return  $.infa.Formats.escapeComprehensive(msg);
        },

        unCamelize : function (str) {
            if (!str || !str.indexOf) {
                return str;
            }
            if (str.indexOf('.') >= 0) {
                return $.infa.Formats.escapeComprehensive(str);
            }
            return  $.infa.Formats.escapeComprehensive(str.replace(/([A-Za-z])([A-Z][a-z])/g, '$1 $2'));
        },
        formatUsername : function(str){
            str = str || "";
            if(str.indexOf("\\") > -1){
                str = str.split("\\")[1];
            }
            return str;
        },
        getCustomFacetQuery: function(attribute) {
            if(this.isDateType(attribute)) {
                return this.getDateFacetQuery(attribute);
            } else {
                return "&facet.field=" + attribute.id;
            }
        },

        /**
         * This gets the date query for performance
         */
        getDateFacetQuery: function(attribute) {
            var DAY = 86400000; // Milliseconds in a day

            var today = new Date(),
                endDate = new Date();
            today.setHours(0,0,0,0);
            endDate.setHours(24, 0, 0, 0);

            var lastMonth = new Date(today),
                last6Month = new Date(today),
                lastYear = new Date(today);

            lastMonth.setMonth(today.getMonth() - 1);
            last6Month.setMonth(today.getMonth() - 6);
            lastYear.setFullYear(today.getFullYear() - 1);

            var formatQuery = function(startDate, endDate) {
                var BASE_DATE_QUERY = "&facet.query=" + attribute.id + ":[";
                var END_QUERY = ' TO NOW]';

                var query = BASE_DATE_QUERY + startDate.toISOString();

                if(!endDate) {
                    query += END_QUERY;
                } else {
                    query += ' TO ' + endDate.toISOString() + ']';
                }

                return query;
            }

            var customQuery = formatQuery(today);                                                           // TODAY
            customQuery += formatQuery(new Date(today.getTime() - DAY), new Date(today.getTime() - 1));     // YESTERDAY
            customQuery += formatQuery(new Date(today.getTime() - 7 * DAY));                                // LAST WEEK
            customQuery += formatQuery(lastMonth);                                                          // LAST MONTH
            customQuery += formatQuery(last6Month);                                                         // LAST 6 MONTHS
            customQuery += formatQuery(lastYear);                                                           // LAST YEAR

            // Only core.LastModified should have the total number of objects
            if(!infa.eic.AppConfigData.isCustom(attribute)) {
                customQuery += "&facet.query=" + attribute.id + ":[* TO *]";
            }

            return customQuery;
        },

        dateCustomFormat :  function(dateObject, formatString){
            if( isNaN(dateObject.getFullYear() )) {
                return;
            }

            var YYYY,YY,MMMM,MMM,MM,M,DDDD,DDD,DD,D,hhh,hh,h,mm,m,ss,s,ampm,AMPM,dMod,th;
            YY = ((YYYY=dateObject.getFullYear())+"").slice(-2);
            MM = (M=dateObject.getMonth()+1)<10?('0'+M):M;
            MMM = (MMMM=["January","February","March","April","May","June","July","August","September","October","November","December"][M-1]).substring(0,3);
            DD = (D=dateObject.getDate())<10?('0'+D):D;
            DDD = (DDDD=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][dateObject.getDay()]).substring(0,3);
            th=(D>=10&&D<=20)?'th':((dMod=D%10)==1)?'st':(dMod==2)?'nd':(dMod==3)?'rd':'th';
            formatString = formatString.replace("#YYYY#",YYYY).replace("#YY#",YY).replace("#MMMM#",MMMM).replace("#MMM#",MMM).replace("#MM#",MM).replace("#M#",M).replace("#DDDD#",DDDD).replace("#DDD#",DDD).replace("#DD#",DD).replace("#D#",D).replace("#th#",th);

            h=(hhh=dateObject.getHours());
            if (h==0) h=24;
            if (h>12) h-=12;
            hh = h<10?('0'+h):h;
            AMPM=(ampm=hhh<12?'am':'pm').toUpperCase();
            mm=(m=dateObject.getMinutes())<10?('0'+m):m;
            ss=(s=dateObject.getSeconds())<10?('0'+s):s;
            return formatString.replace("#hhh#",hhh).replace("#hh#",hh).replace("#h#",h).replace("#mm#",mm).replace("#m#",m).replace("#ss#",ss).replace("#s#",s).replace("#ampm#",ampm).replace("#AMPM#",AMPM);
        },

        getFacetFormatter: function(facetType, isCoreType) {
            if(facetType === 'date') {
                return this.formatDate;
            } else if(facetType === 'range' || facetType === 'slider') {
                return this.formatRange;
            } else {
                var self = this;
                return function(value) {
                    var displayLabel = value

                    // This function helps parse a classifier hierarchy and display it with value first then split by commas
                    if(!isCoreType) {
                        label = value.split("/").reverse().join(", ");
                        displayLabel = self.unCamelize(label);
                    }

                    return displayLabel;
                }
            }
        },

        formatDate : function(millisecs, skipTime) {
            if (millisecs) {
                var format = '#MMM# #DD#, #YYYY#';
                if (!skipTime) {
                    format += ' #hh#:#mm##ampm#';
                }

                if (typeof millisecs === 'string' || millisecs instanceof String) {
                    var dates = millisecs.split(',');
                    for(var i = 0; i < dates.length; i++) {
                        dates[i] = infa.ldm.Utils.dateCustomFormat(new Date(dates[i].trim()), format);
                    }

                    return dates.join(', ');
                } else {
                    return infa.ldm.Utils.dateCustomFormat(new Date(millisecs), format);
                }

            }
        },

        formatRange : function(v) {
            if(Math.abs(v) >= 1000000){
                return Math.round(v / 1000000) + "M";
            } else if (Math.abs(v) >= 1000) {
                return Math.round(v / 1000) + "K";
            } else {
                return v;
            }
        },

        filterItems: function(items, term){
            if(!term)
                return items;

            var newTerm = term.replace(/[\-\[\]{}()+?.,\\\^$|#\s]/g, "\\$&").replace(/\*/g, ".$&"),
                matcher = new RegExp(newTerm, "i" ),
                labelMatcher = new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + newTerm + ")(?![^<>]*>)(?![^&;]+;)", "gi");

            var newList = [];
            for(var i = 0; i < items.length; i++) {
                var label = items[i].label,
                    packageName = items[i].packageName,
                    labelMatch = matcher.test(label),
                    packageMatch = matcher.test(packageName);

                if(labelMatch || packageMatch) {
                    if(labelMatch)
                        items[i].label = label.replace(labelMatcher, "<b>$1</b>");
                    if(packageMatch)
                        items[i].packageName = packageName.replace(labelMatcher, "<b>$1</b>");

                    newList.push(items[i]);
                }
            }

            return newList;
        },

        //See: http://stackoverflow.com/questions/2388115/get-locale-short-date-format-using-javascript
        getLocaleDateString: function(){
            var formats = {
               "ar-SA" : "dd/MM/yy",
               "bg-BG" : "dd.M.yyyy",
               "ca-ES" : "dd/MM/yyyy",
               "zh-TW" : "yyyy/M/d",
               "cs-CZ" : "d.M.yyyy",
               "da-DK" : "dd-MM-yyyy",
               "de-DE" : "dd.MM.yyyy",
               "el-GR" : "d/M/yyyy",
               "en-US" : "M/d/yyyy",
               "fi-FI" : "d.M.yyyy",
               "fr-FR" : "dd/MM/yyyy",
               "he-IL" : "dd/MM/yyyy",
               "hu-HU" : "yyyy. MM. dd.",
               "is-IS" : "d.M.yyyy",
               "it-IT" : "dd/MM/yyyy",
               "ja-JP" : "yyyy/MM/dd",
               "ko-KR" : "yyyy-MM-dd",
               "nl-NL" : "d-M-yyyy",
               "nb-NO" : "dd.MM.yyyy",
               "pl-PL" : "yyyy-MM-dd",
               "pt-BR" : "d/M/yyyy",
               "ro-RO" : "dd.MM.yyyy",
               "ru-RU" : "dd.MM.yyyy",
               "hr-HR" : "d.M.yyyy",
               "sk-SK" : "d. M. yyyy",
               "sq-AL" : "yyyy-MM-dd",
               "sv-SE" : "yyyy-MM-dd",
               "th-TH" : "d/M/yyyy",
               "tr-TR" : "dd.MM.yyyy",
               "ur-PK" : "dd/MM/yyyy",
               "id-ID" : "dd/MM/yyyy",
               "uk-UA" : "dd.MM.yyyy",
               "be-BY" : "dd.MM.yyyy",
               "sl-SI" : "d.M.yyyy",
               "et-EE" : "d.MM.yyyy",
               "lv-LV" : "yyyy.MM.dd.",
               "lt-LT" : "yyyy.MM.dd",
               "fa-IR" : "MM/dd/yyyy",
               "vi-VN" : "dd/MM/yyyy",
               "hy-AM" : "dd.MM.yyyy",
               "az-Latn-AZ" : "dd.MM.yyyy",
               "eu-ES" : "yyyy/MM/dd",
               "mk-MK" : "dd.MM.yyyy",
               "af-ZA" : "yyyy/MM/dd",
               "ka-GE" : "dd.MM.yyyy",
               "fo-FO" : "dd-MM-yyyy",
               "hi-IN" : "dd-MM-yyyy",
               "ms-MY" : "dd/MM/yyyy",
               "kk-KZ" : "dd.MM.yyyy",
               "ky-KG" : "dd.MM.yy",
               "sw-KE" : "M/d/yyyy",
               "uz-Latn-UZ" : "dd/MM yyyy",
               "tt-RU" : "dd.MM.yyyy",
               "pa-IN" : "dd-MM-yy",
               "gu-IN" : "dd-MM-yy",
               "ta-IN" : "dd-MM-yyyy",
               "te-IN" : "dd-MM-yy",
               "kn-IN" : "dd-MM-yy",
               "mr-IN" : "dd-MM-yyyy",
               "sa-IN" : "dd-MM-yyyy",
               "mn-MN" : "yy.MM.dd",
               "gl-ES" : "dd/MM/yy",
               "kok-IN" : "dd-MM-yyyy",
               "syr-SY" : "dd/MM/yyyy",
               "dv-MV" : "dd/MM/yy",
               "ar-IQ" : "dd/MM/yyyy",
               "zh-CN" : "yyyy/M/d",
               "de-CH" : "dd.MM.yyyy",
               "en-GB" : "dd/MM/yyyy",
               "es-MX" : "dd/MM/yyyy",
               "fr-BE" : "d/MM/yyyy",
               "it-CH" : "dd.MM.yyyy",
               "nl-BE" : "d/MM/yyyy",
               "nn-NO" : "dd.MM.yyyy",
               "pt-PT" : "dd-MM-yyyy",
               "sr-Latn-CS" : "d.M.yyyy",
               "sv-FI" : "d.M.yyyy",
               "az-Cyrl-AZ" : "dd.MM.yyyy",
               "ms-BN" : "dd/MM/yyyy",
               "uz-Cyrl-UZ" : "dd.MM.yyyy",
               "ar-EG" : "dd/MM/yyyy",
               "zh-HK" : "d/M/yyyy",
               "de-AT" : "dd.MM.yyyy",
               "en-AU" : "d/MM/yyyy",
               "es-ES" : "dd/MM/yyyy",
               "fr-CA" : "yyyy-MM-dd",
               "sr-Cyrl-CS" : "d.M.yyyy",
               "ar-LY" : "dd/MM/yyyy",
               "zh-SG" : "d/M/yyyy",
               "de-LU" : "dd.MM.yyyy",
               "en-CA" : "dd/MM/yyyy",
               "es-GT" : "dd/MM/yyyy",
               "fr-CH" : "dd.MM.yyyy",
               "ar-DZ" : "dd-MM-yyyy",
               "zh-MO" : "d/M/yyyy",
               "de-LI" : "dd.MM.yyyy",
               "en-NZ" : "d/MM/yyyy",
               "es-CR" : "dd/MM/yyyy",
               "fr-LU" : "dd/MM/yyyy",
               "ar-MA" : "dd-MM-yyyy",
               "en-IE" : "dd/MM/yyyy",
               "es-PA" : "MM/dd/yyyy",
               "fr-MC" : "dd/MM/yyyy",
               "ar-TN" : "dd-MM-yyyy",
               "en-ZA" : "yyyy/MM/dd",
               "es-DO" : "dd/MM/yyyy",
               "ar-OM" : "dd/MM/yyyy",
               "en-JM" : "dd/MM/yyyy",
               "es-VE" : "dd/MM/yyyy",
               "ar-YE" : "dd/MM/yyyy",
               "en-029" : "MM/dd/yyyy",
               "es-CO" : "dd/MM/yyyy",
               "ar-SY" : "dd/MM/yyyy",
               "en-BZ" : "dd/MM/yyyy",
               "es-PE" : "dd/MM/yyyy",
               "ar-JO" : "dd/MM/yyyy",
               "en-TT" : "dd/MM/yyyy",
               "es-AR" : "dd/MM/yyyy",
               "ar-LB" : "dd/MM/yyyy",
               "en-ZW" : "M/d/yyyy",
               "es-EC" : "dd/MM/yyyy",
               "ar-KW" : "dd/MM/yyyy",
               "en-PH" : "M/d/yyyy",
               "es-CL" : "dd-MM-yyyy",
               "ar-AE" : "dd/MM/yyyy",
               "es-UY" : "dd/MM/yyyy",
               "ar-BH" : "dd/MM/yyyy",
               "es-PY" : "dd/MM/yyyy",
               "ar-QA" : "dd/MM/yyyy",
               "es-BO" : "dd/MM/yyyy",
               "es-SV" : "dd/MM/yyyy",
               "es-HN" : "dd/MM/yyyy",
               "es-NI" : "dd/MM/yyyy",
               "es-PR" : "dd/MM/yyyy",
               "am-ET" : "d/M/yyyy",
               "tzm-Latn-DZ" : "dd-MM-yyyy",
               "iu-Latn-CA" : "d/MM/yyyy",
               "sma-NO" : "dd.MM.yyyy",
               "mn-Mong-CN" : "yyyy/M/d",
               "gd-GB" : "dd/MM/yyyy",
               "en-MY" : "d/M/yyyy",
               "prs-AF" : "dd/MM/yy",
               "bn-BD" : "dd-MM-yy",
               "wo-SN" : "dd/MM/yyyy",
               "rw-RW" : "M/d/yyyy",
               "qut-GT" : "dd/MM/yyyy",
               "sah-RU" : "MM.dd.yyyy",
               "gsw-FR" : "dd/MM/yyyy",
               "co-FR" : "dd/MM/yyyy",
               "oc-FR" : "dd/MM/yyyy",
               "mi-NZ" : "dd/MM/yyyy",
               "ga-IE" : "dd/MM/yyyy",
               "se-SE" : "yyyy-MM-dd",
               "br-FR" : "dd/MM/yyyy",
               "smn-FI" : "d.M.yyyy",
               "moh-CA" : "M/d/yyyy",
               "arn-CL" : "dd-MM-yyyy",
               "ii-CN" : "yyyy/M/d",
               "dsb-DE" : "d. M. yyyy",
               "ig-NG" : "d/M/yyyy",
               "kl-GL" : "dd-MM-yyyy",
               "lb-LU" : "dd/MM/yyyy",
               "ba-RU" : "dd.MM.yy",
               "nso-ZA" : "yyyy/MM/dd",
               "quz-BO" : "dd/MM/yyyy",
               "yo-NG" : "d/M/yyyy",
               "ha-Latn-NG" : "d/M/yyyy",
               "fil-PH" : "M/d/yyyy",
               "ps-AF" : "dd/MM/yy",
               "fy-NL" : "d-M-yyyy",
               "ne-NP" : "M/d/yyyy",
               "se-NO" : "dd.MM.yyyy",
               "iu-Cans-CA" : "d/M/yyyy",
               "sr-Latn-RS" : "d.M.yyyy",
               "si-LK" : "yyyy-MM-dd",
               "sr-Cyrl-RS" : "d.M.yyyy",
               "lo-LA" : "dd/MM/yyyy",
               "km-KH" : "yyyy-MM-dd",
               "cy-GB" : "dd/MM/yyyy",
               "bo-CN" : "yyyy/M/d",
               "sms-FI" : "d.M.yyyy",
               "as-IN" : "dd-MM-yyyy",
               "ml-IN" : "dd-MM-yy",
               "en-IN" : "dd-MM-yyyy",
               "or-IN" : "dd-MM-yy",
               "bn-IN" : "dd-MM-yy",
               "tk-TM" : "dd.MM.yy",
               "bs-Latn-BA" : "d.M.yyyy",
               "mt-MT" : "dd/MM/yyyy",
               "sr-Cyrl-ME" : "d.M.yyyy",
               "se-FI" : "d.M.yyyy",
               "zu-ZA" : "yyyy/MM/dd",
               "xh-ZA" : "yyyy/MM/dd",
               "tn-ZA" : "yyyy/MM/dd",
               "hsb-DE" : "d. M. yyyy",
               "bs-Cyrl-BA" : "d.M.yyyy",
               "tg-Cyrl-TJ" : "dd.MM.yy",
               "sr-Latn-BA" : "d.M.yyyy",
               "smj-NO" : "dd.MM.yyyy",
               "rm-CH" : "dd/MM/yyyy",
               "smj-SE" : "yyyy-MM-dd",
               "quz-EC" : "dd/MM/yyyy",
               "quz-PE" : "dd/MM/yyyy",
               "hr-BA" : "d.M.yyyy.",
               "sr-Latn-ME" : "d.M.yyyy",
               "sma-SE" : "yyyy-MM-dd",
               "en-SG" : "d/M/yyyy",
               "ug-CN" : "yyyy-M-d",
               "sr-Cyrl-BA" : "d.M.yyyy",
               "es-US" : "M/d/yyyy"
            };

            return formats[navigator.language || navigator.userLanguage] || 'M/D/YYYY';//'MM/dd/yyyy';
        },

        //Gets format in M/D/YYYY, D/M/YYYY, YYYY/M/D, YYYY/D/M
        getSimpleDateFormat: function(format){
            var curFormat = format ? format : infa.ldm.Utils.getLocaleDateString(),
                getDateSplit = function(value){
                    value = value.split(' ').join('');
                    value = value.split('-').join('/');
                    value = value.split('.').join('/');
                    split = value.split('/');
                    return split;
                },
                formatSplit = getDateSplit(curFormat),
                formatString = "",
                count = 0;

            $.each(formatSplit, function(i, cur){
                var curString = "";
                if(cur.indexOf('M') > -1 || cur.indexOf('m') > -1){
                    curString = 'M';
                } else if(cur.indexOf('D') > -1 || cur.indexOf('d') > -1){
                    curString = 'D';
                } else if(cur.indexOf('Y') > -1 || cur.indexOf('y') > -1){
                    curString = 'YYYY';
                }

                if(count == 2)
                    formatString += curString;
                else
                    formatString += (curString + "/");

                count++;
            });

            return formatString;
        },

        formatDateSimple: function(date){
            var format = infa.ldm.Utils.getSimpleDateFormat(),
                plainFormat = format.split('/').join(''),
                newDateSplit = [],
                month = plainFormat.indexOf('M'),
                day = plainFormat.indexOf('D'),
                year = plainFormat.indexOf('Y');

            if(month === -1 || day === -1 || year === -1)
                return;

            newDateSplit[month] = date.getMonth() + 1;
            newDateSplit[day] = date.getDate();
            newDateSplit[year] = date.getFullYear();

            return newDateSplit.join('/');
        },

        getDateByLocale: function(dateString){
            var format = infa.ldm.Utils.getLocaleDateString(),
                simpleFormat = infa.ldm.Utils.getSimpleDateFormat().split('/').join(''),
                dateSplit = dateString.split('/'),
                day = simpleFormat.indexOf('D'),
                month = simpleFormat.indexOf('M'),
                year = simpleFormat.indexOf('Y');

            //Date does not match format
            if(dateSplit.length !== 3)
                return;

            return new Date(dateSplit[year], parseInt(dateSplit[month]) - 1, dateSplit[day]);
        },
        getExludeAssociationsFromOverview : function() {
            if(!this.excludeAssociations){
                this.excludeAssociations=["core.DataFlow","core.DataSetDataFlow","core.DataSourceDataFlow"];
            }
            return this.excludeAssociations;

        },
        isBgObject:function(objectType){
            switch (objectType){
                case infa.ldm.Utils.BG_TERM :
                case infa.ldm.Utils.BG_CATEGORY:
                case infa.ldm.Utils.BG_GLOSSARY:
                case infa.ldm.Utils.BG_POLICY:
                    return true;
                default:
                return false;
            }
        },
        isAxonObject:function(objectType){
            switch (objectType){
                case infa.ldm.Utils.AXON_GLOSSARY :
                    return true;
                default:
                return false;
            }
        },
        getParentChildAssociations :function () {
            return [
                    'com.infa.ldm.relational.PublicSynonymColumn',
                    'com.infa.ldm.relational.SynonymColumn',
                    'com.infa.ldm.relational.TableColumn',
                    'com.infa.ldm.relational.ViewViewColumn',
                    'com.infa.ldm.file.delimited.DelimitedFileField',
                    'com.infa.ldm.file.xml.XMLFileField',
                    'com.infa.ldm.file.json.JSONFileField',
                    'com.infa.ldm.adapter.ObjectField'
                ]
        },
        getHTMLHeight: function(content) {
            var elem = $("#measureHTMLHeight1");
            if (elem.length ==0) {
                elem = $('<div style="position:absolute;top:-100px;left:-100px;white-space:nowrap" id="measureHTMLWidth"></div>');//document.createElement("div");
                $('body').append(elem);
            }
            elem.append( content );
            return elem[0].scrollHeight;
        },
        showLineage: function(objectType) {
            return !infa.ldm.Utils.isBgObject(objectType);
        },
        showHelpTooltip : function(config) {
            config.targetEl.infaTooltip({
                classes: "infaHelpTooltip",
                content: "<p class='helpContent'>"+config.helpText+"</p>"
            });
            var tooltip = $.getWidget(config.targetEl, "infaTooltip");
            tooltip.setOrientation(config.orientation ? config.orientation : "rightcenter");
            config.targetEl.one('onHide', function() {
                var tooltip = $.getWidget($(this), 'infaTooltip');
                if(tooltip) {
                    tooltip.destroy();
                }
                infa.ldm.Utils.showHelpTooltip(config);
            });
        },
        showContentInDialog: function(config) {
            config.content = config.content ? config.content : "";
            var $dialog = $('<div>').append(config.content);

            //Fixed set of configuration for dialog which cannot be overridden
            buttonLabels= config.buttonLabels;
            buttons= config.buttonLabels;
            config.close = function() {
                $(this).infaDialog('destroy').remove();
            };
            config.autoOpen = true;

            //This should be a dynamic height dialog so setting max-height instead of height
            if(config.height) {
                $dialog.css({
                    maxHeight : config.height
                });
                delete config.height;
            }

            //Removing content as it is not part of the infaDialog config.
            delete config.content;
            $dialog.infaDialog(config);

            return $dialog;
        },
        getAssetLocalizedType: function() {
            if( !this.localizedAssetType ){
                this.localizedAssetType =[];
                this.localizedAssetType.push('Category');
                this.localizedAssetType.push('Glossary');
                this.localizedAssetType.push('Policy');
                this.localizedAssetType.push('Axon')
            }
            return this.localizedAssetType;
        },
        escapeAndEncodeString : function(str) {
            var escapedStr = str;
            if(escapedStr){
                escapedStr = escapedStr.replace(/[&\-+()~\\":*?!{}^]/g,'\\$&');
            }
            return encodeURIComponent(escapedStr);
        },

        sortListOnKey : function(list, key){
            var query = jLinq.from(list).ignoreCase();
            query.sort(key);
            list.sort(function(a, b){
                var labelA = a[key].toUpperCase(),
                    labelB = b[key].toUpperCase();
                if(labelA < labelB) return -1;
                if(labelA > labelB) return 1;
                return 0;
            });
        },

        isURL : function(urlStr) {
            var regexp = /^(ftp|sftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            return regexp.test(urlStr);
        },

        isRichText : function(str) {
            var regexp = new RegExp('<("[^"]*"|\'[^\']*\'|[^\'">])*>')
            return regexp.test(str);
        },

     searchWithCustomisedObjectQuery: function(ids) {
        var query = '/extension.eic.360.fetch?',
        url = "",
        defered = $.Deferred(),
        linksList = [];
        if( ids.length == 0 ){
            return defered.resolve([]);
        }else{
            for (var i = 0; i < ids.length; i++) {
                if(i==ids.length-1){
                    url= url+ RISON.urlencode(ids[i])+"&";
                }else{
                    url= url+ "&id="+RISON.urlencode(ids[i]) + "&id=";
                }
            };
            url += 'direction=OUT&relationships=com.infa.ldm.bg.bgClassifierKind&relationships=com.infa.ldm.axon.axonClassifierKind';
            query += url;
            return $.blockGetJSON(query).then(function(res) {
               return defered.resolve(res);
            });
        }
        return defered.promise();
    },
      fetchObject:function(id){

            //make a rest call using identity to fetch full classifier object and get identity for 360 view of the object
           var deferred= $.Deferred();
           var query = '/extension.eic.360.fetch?' + RISON.urlencode(id);
           //var query = '/extension.eic.search.search?q=('+RISON.urlencode( Object.keys(dd).join(" "))+')&qf=id&fl=id,core.name';

           $.blockGetJSON(query).then(function(res) {
             deferred.resolve(res);
           }).fail(function(jqXHR, textStatus, errorThrown) {
            infaw.shell.common.Utils.showErrorFromResponse(infa.ldm.Utils.getErrorMessage(jqXHR, textStatus, errorThrown));
           });
           return deferred.promise();

        },
        getSortedIdentitiesByName : function(identities){
            var identityNames = [],
                sortedIdentities = [];

            var queryString = "q=(\""+identities.join("\" \"")+"\")&qf=id&fl=id&fl=core.name&pageSize="+identities.length;

             $.ajax({
                 type: "POST",
                 url : $.url("/extension.eic.search.search?"),
                 async : false,
                 data : queryString,
                contentType: 'application/json',
                datatype: "text"
                 }).then(function(response) {
                 response.items.forEach(function(i) {
                     identityNames.push({"name" : i.values[0].value.toUpperCase(), "id": i.id});
                 })

                 infa.ldm.Utils.sortListOnKey(identityNames, "name");
             }).fail(function(){
             })

             identityNames.forEach(function(obj, index){
                    sortedIdentities.push(obj.id);
                })
           return  sortedIdentities;
        },

        isCustomMetadata: function(classType) {
            var isCustomMetadata = false;
            if(classType && classType.indexOf("com.infa.") != 0 && classType.indexOf("core.") != 0 ) {
                isCustomMetadata = true;
            }
            return isCustomMetadata;
        },

        getETLSearchableTypes: function(package) {
            var objectTypes = ["com.infa.ldm.etl.pc.Mapping", "com.infa.ldm.clouderanavigator.Operation"];
            if(package) {
                objectTypes = objectTypes.filter(function(type) {
                    return type.indexOf(package) === 0;
                });
            }
            return objectTypes;
        },

        exportFileContent: function(config) {
            var uri = config.uri,
                fileContent = config.content,
                contentType = config.contentType ? config.contentType : "text/plain";

            $.blockPostJSON(uri, fileContent, null, -1)
                .then(function(resp) { 
                    var fileid = resp.fileId[0],
                        filename = config.filename ? config.filename : fileid,
                        tempFormId = "exportFileContent";
                
                    $("#"+tempFormId).remove();
                    var $form = $("<form method='GET'  action='"+$.url(uri)+"'></form>")
                        .prop("id", tempFormId)
                        .css("display","none");
                    
                    $form.append("<input type='hidden' name = 'infaToken' value='"+ infa.utils.Utils.instance().getToken() +"'>");
                    $form.append("<input type='hidden' name='filename' value='"+filename+"'>");
                    $form.append("<input type='hidden' name='contentType' value='"+contentType+"'>");
                    $form.append("<input type='hidden' name='fileid' value='"+fileid+"'>");
                    $form.append("<input type='submit'>");
                    $('body').append($form);
                    $form.submit();

                    if(config.onDownloadStart) {
                        config.onDownloadStart(filename);
                    }
                });
        }

    }, {

    }
);


(function ($) {
    
    var _richTxtWidget = null;

    $.Class('$.infa.Utils.Formats', {

        escape: function (v) {
            return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        },

        replaceCaseInsensitive: function (str, searchMask, replaceMask) {
            var regEx = new RegExp(searchMask, "ig");
            var result = str.replace(regEx, replaceMask);
            return result;
        },

        escapeScript: function (str) {
            var escapeOpen = this.replaceCaseInsensitive(str, "<script", "&lt;script");
            return this.replaceCaseInsensitive(escapeOpen, "</script", "&lt;/script");
        },

        escapeComprehensive: function (v) {
            if (!v) {
                return v;
            }

            var entityMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': '&quot;',
                "'": '&#39;',
                "/": '&#x2F;',
                ",": '&#44;'
            };

            return String(v).replace(/[&<>"'\/,]/g, function (s) {
                return entityMap[s];
            });
        },

        unEscape: function (v) {
            return v.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
        },

        unEscapeComprehensive: function (v) {
            return v.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&#x2F;/g, "/").replace(/&#44;/g, ",");
        },

        replacePrePostWhiteSpaces: function (v) {
            return v.replace(/(^(\s+)|(\s+)$)/g, function (spaces) {
                return spaces.replace(/\s/g, "&nbsp;");
            });
        },

        escapeRTF: function (v) {
            return $.infa.Formats.escape(v)
                .replace(/&lt;b&gt;/g, '<b>').replace(/&lt;\/b&gt;/g, '</b>')
                .replace(/&lt;i&gt;/g, '<i>').replace(/&lt;\/i&gt/g, '</i>')
                .replace(/&lt;ul&gt;/g, '<ul>').replace(/&lt;\/ul&gt/g, '</ul>')
                .replace(/&lt;li&gt;/g, '<li>').replace(/&lt;\/li&gt/g, '</li>');
        },

        escapeSelector: function (v) {
            if (v) {
                return v.replace(/([ #;?%&,.+*~\\':"!^$[\]()=>|\/@])/g, '\\$1');
            }
            return v;
        },

        /**
         * This method can be used to remove XSS vulnerability in html content.
         */
        escapeRTFContent: function (content, type) {
            if(!_richTxtWidget) {
                var cntr = $("<div></div>")
                    .css({
                        width: 0,
                        height: 0,
                        display: "none"
                    }).infaRichText({
                        disableResizeEditor: true,
                        width: 300
                    });

                _richTxtWidget = $.getWidget(cntr, 'infaRichText');
            }
            _richTxtWidget.setValue(content);

            var valueFormat = 1;
            if(type == "PLAIN_TEXT") {
                valueFormat = 0;
            }else if(type == "HYPERLINK_ONLY") {
                valueFormat = 2;
            }
            return _richTxtWidget.getValue(valueFormat);
        }
    }, {});
})(jQuery);

