/**
 * @author Gopakumar V
 * Abstract class used for overiew page panel.
 */

$.Class('infaw.ldm.threeSixty.abstractPanel', {

    PANEL_STATE: {
        UNDO_EDIT: "undoEdit",
        SUBMIT: "submit",
        READ_ONLY: "readonly",
        EDIT_MODE: "editMode"
    }

}, {

    //Default css class for panels without header.
    plainPanelCls: "container-fluid",

    //Default css class for panels.
    panelCls: "panel eic-panel",

    init: function (config) {
        var self = this;
        this._initVariables(config);
      //  $.when(infaw.eic.PermissionUtils.getInstance().getAccessDetails(config.objectInfo)).always(function (details) {
           // if (details)
          //      self._accessDetails = details;
            self._create(config);
    //    });
    },

    _create: function (config) {
        var self = this;
        $.when(this.isVisible()).done(function (isVisible) {
            self._createPanel(config);
            if (!isVisible)
                self.hide();
        }).fail(function () {
            console.error("Failed to render class :: isVisible method should return promise which is resolved as true/false");
        });
    },

    _createPanel: function (config) {
        if (this._config.cls) {
            this._mainPanelCntr.addClass(this._config.cls);
        }
        this.createUI();
        this._setPanelState(this._currentPanelState);
    },


    /**
     * Used to specify if the panel should to be visible or not.
     * @return {boolean|Promise}
     */
    isVisible: function () {
        return true;
    },

    /**
     * Initializes instance specific variables.
     */
    _initVariables: function (config) {
        this._config = config;
        this._mainPanelCntr = $("<div></div>").addClass(this.hasHeader() ? this.panelCls : this.plainPanelCls).appendTo(config.renderTo);
        this.resBundle = "infaw.ldm.threeSixty";
        this._header = null;
        this._content = null;
        this._panelId;
        try {
            this._panelId = $.htmlId(this.__proto__.Class.shortName);
        } catch (error) {
            this._panelId = $.htmlId("abstractPanel");
        }
        this._currentPanelState = this._config.state ? this._config.state : infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY;
        this._accessDetails = {
            readPrivilege: false,
            editPrivilege: false,
            permissionObject: {},
            accessControl: {}
        };
        this.onInitialize();
    },

    onInitialize: function () {},


    /**
     * Returns true if the panel is readonly mode.
     * @returns {Boolean}
     */
    isReadOnly: function () {
        return this._currentPanelState === infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY;
    },

    createUI: function () {
        var self = this;
        if (this.hasHeader()) {
            if (!this._header)
                this._header = $("<div></div>")
                .prop("id", "header_" + this._panelId)
                .addClass("eicPanelHeader panel-heading")
                .css("visibility", "hidden")
                .appendTo(this._mainPanelCntr);
            this._header.empty();
        }

        if (!this._content)
            this._content = $("<div></div>")
            .prop("id", "panelContent_" + this._panelId)
            .css("visibility", "hidden")
            .addClass("eicPanelContent panel-collapse collapse t100S in")
            .appendTo(this._mainPanelCntr);
        this._content.on('expand',function(){
            self._expandPanel();
        });
        this._content.on('collapse',function(){
            self._collapsePanel();
        });
        this._content.empty();

        this.beforeRender().done(function () {
            self._renderUI();
        }).fail(function (error) {
            self._renderUI(true, error);
        }).always(function () {
            if (self._header)
                self._header.css("visibility", "visible");
            self._content.css("visibility", "visible");
        });
    },

    /**
     * Creates error template and renders it in the container.
     * @param  {jQuery DOM Element} cntr Container were error message is to be rendered.
     * @param  {String} error Error message to be printed when panel is empty.
     */
    setErrorContent: function (cntr, error) {
        var cntr = cntr ? cntr : this._content,
            error = error ? error : $.getLocalizedText(this.resBundle, "EMPTY_MSG"),
            _errorContent = $("<div></div>").addClass("row panelError");

        $("<div></div>", {
                align: "center"
            }).addClass("col-md-12")
            .html(error).appendTo(_errorContent);

        cntr.addClass("errorContent").prepend(_errorContent);
    },

    clearErrorMsg: function () {
        this._content.find(".errorContent").removeClass("errorContent");
        this._content.find(".panelError").remove();
    },

    /**
     * Prints no data message in the panel.
     */
    showEmptyMsg: function (error) {
        this.setErrorContent(null, error);
    },

    /**
     * This method is used to do any preprocessing if required before rendering panel content.
     * @returns {Promise}
     */
    beforeRender: function () {
        var deferred = $.Deferred();
        deferred.resolve();
        return deferred.promise();
    },

    triggerEvent: function (eventConfig, timeout) {
        this._config.triggerEvent(eventConfig, timeout);
    },

    /**
     * Used to refresh the LDM Object.
     */
    refreshObjectView: function () {
        this.triggerEvent("refreshObjectView");
    },

    /**
     * Returns if the panel has editable content.
     * @returns {Boolean}
     */
    isEditable: function () {
        return this._config.editable;
    },

    /**
     * Returns if the panel is hidden or not.
     * @returns {Boolean}
     */
    isHidden: function () {
        return this._isHidden;
    },

    /**
     * Method to hide the panel.
     */
    hide: function () {
        this._isHidden = true;
        this._mainPanelCntr.hide();
        this._config.onHide();
    },

    /**
     * Method to show the panel.
     */
    show: function () {
        this._isHidden = false;
        this._mainPanelCntr.show();
    },

    /**
     * Returns LDMObjects associated with the panel.
     * @returns {LDMObject}
     */
    getObjectInfo: function () {
        return this._config.objectInfo;
    },

    /**
     * Tells if the panel has header bar.
     * @returns {Boolean}
     */
    hasHeader: function () {
        return this._config.hasHeader;
    },
    /**
     * This method is used to create buttons in the action tag of header bar.
     * @private
     * @param  {object} config configuration for button.
     * @property {jQuery DOM Object} renderTo Were to render the button.
     * @property {String} icon icon path.
     * @property {String} tooltip Tooltip for the button.
     *
     * @returns {Object}
     * @property {String} elem Dom of buttom element created.
     * @property {InfaButton} widget InfaButton widget object.
     */
    _createIconBtn: function (config) {
        var btnEle = $('<div></div>')
            .addClass("iconBtn")
            .appendTo(config.renderTo)
            .infaButton({
                shape: 'iconic',
                activeOOFColor: '#000',
                transparent: true,
                icon: $.url(config.icon),
                height: 20,
                width: 20,
                tooltip: config.tooltip
            }).on('onSelect', function () {
                config.onClick();
            });

        if (config.hidden) {
            btnEle.hide();
        } else {
            btnEle.show();
        }

        return {
            elem: btnEle,
            widget: $.getWidget(btnEle, "infaButton")
        };
    },

    _collapsePanel: function () {
        var self = this;
        
        self._content.removeClass("expand").addClass("collapset",function(){
            self._content.removeClass("in");self._content.hide();
        })
        
        this._header.addClass("collapsed");
        this._config.collapsed = true;
        this.onCollapse();
    },

    _expandPanel: function () {
        var self = this;
        self._content.show(300);
        self._content.addClass("in",function(){
            self._content.removeClass("collapset").addClass("expand");
        })
        this._header.removeClass("collapsed");
        this._config.collapsed = false;
        this.onExpand();
    },

    _renderUI: function (error, errorDetails) {
        var self = this;
        if (this._header) {
            var header = this._header,
                title = $("<div></div>").addClass("panel-title").appendTo(header),
                actions = $("<div></div>").addClass("pull-right actionsCntr").on("click", function (e) {
                    e.stopPropagation();
                }).appendTo(title);


            /**
             * Add styles and handler for collapsible panel.
             */
            if (this.canCollapse()) {
                header.addClass("collapsible");
                title.on("click", function () {
                    if (self._config.collapsed) {
                        self._expandPanel();

                        if (self.refreshContentOnExpand())
                            self.refresh();
                    } else {
                        self._collapsePanel();
                    }
                });

                /**
                 * If inital state is collapsed.
                 */
                if (this._config.collapsed) {
                    this._collapsePanel();
                }
            }

            $("<div></div>").addClass("panel-header-icon").appendTo(title);
            var _titleText = $("<div></div>").addClass("titleText textElipsisStyle pull-left").appendTo(title);
            this.setTitle(_titleText);

            var help = this.getHelp();
            if (!_.isEmpty(help)) {
                this._addHelpBtn(title, help);
            }

            this.setActionsContent(actions);

            //Adding default action button in case the panel is ediable.
            //Default buttons configured :- Edit, Submit and Cancel.
            if(this._hasEditPermission()) {
                this._addEditCapability(actions);
            }
            
        }

        if (error === true) {
            this.setErrorContent(this._content, errorDetails);
        } else {
            if (!this._config.collapsed || !this.refreshContentOnExpand()) {
                this.setPanelContent(this._content);
            }
        }
    },

    _hasEditPermission: function() {
        var isAdmin = this._accessDetails.permissionObject && this._accessDetails.permissionObject.isAdmin,
            canEdit = false;

        if(isAdmin) {
            canEdit = true;
        }else {
            canEdit = this._accessDetails.editPrivilege && (this._accessDetails.permissionObject && this._accessDetails.permissionObject.permission == "READ_WRITE");
        }

        return canEdit;
    },

    /**
     * Creates all the buttons required to handle edit of a panel.
     */
    _addEditCapability: function (cntr) {
        if (this.isEditable()) {
            var self = this;
            //Adding default edit button to the panel action area.
            this._editButton = this._createIconBtn({
                renderTo: cntr,
                icon: '/res/img/common/edit.svg',
                tooltip: $.getLocalizedText(this.resBundle, "TOOLTIP_PANEL_EDIT"),
                hidden: false,
                onClick: function () {
                    self.onEditHandler();
                }
            });

            //Adding default submit button to the panel action area.
            this._submitButton = this._createIconBtn({
                renderTo: cntr,
                icon: '/res/img/360/inrow_apply.svg',
                tooltip: $.getLocalizedText(this.resBundle, "TOOLTIP_PANEL_SUBMIT"),
                hidden: true,
                onClick: function () {
                    self.showLoading(true);
                    $.when(self.onSubmit())
                        .done(function () {
                            self.showLoading(false);
                            self._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY, {
                                formSubmitSuccess: true
                            });
                        }).fail(function (jqXHR, textStatus, errorThrown) {
                            self.showLoading(false);
                            var errorMsg = infa.ldm.Utils.getErrorMessage(jqXHR, textStatus, errorThrown);
                            if (errorMsg) {
                                infaw.shell.common.Utils.showErrorFromResponse(errorMsg);
                            }
                            self._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY, {
                                formSubmitSuccess: false,
                                revertChanges: true
                            });
                        });
                }
            });

            //Adding default cancel button to the panel action area.
            this._cancelButton = this._createIconBtn({
                renderTo: cntr,
                icon: '/res/img/360/inrow_clear.svg',
                tooltip: $.getLocalizedText(this.resBundle, "label_cancel"),
                hidden: true,
                onClick: function () {
                    self._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY, {
                        revertChanges: true
                    });
                }
            });
        }

    },

    _addHelpBtn: function (cntr, config) {
        var helpEl = $("<div><img src='" + $.url('/res/img/360/help.svg') + "'/></div>")
            .addClass('helpIcon pull-left')
            .on("click", function (e) {
                e.stopPropagation();
                if (infa.ldm.Utils.isURL(config.url)) {
                    window.open(config.url, "NewWindow", "height=500,width=600");
                }
            })
            .appendTo(cntr);

        infa.ldm.Utils.showHelpTooltip({
            targetEl: helpEl,
            helpText: config.tooltip
        });
    },

    /**
     * used to set title.
     * @param  {jQuery DOM Object} cntr jquery dom object.
     */
    setTitle: function (cntr) {
        cntr.append("Panel Title");
    },

    /**
     * used to set panel header action area content.
     * @param  {jQuery DOM Object} actionsCntr jquery dom object.
     */
    setActionsContent: function (actionsCntr) {

    },

    /**
     * hide edit action button in panel header.
     */
    hideEditButton: function () {
        this._editButton.elem.hide();
    },

    /**
     * hide edit action button in panel header.
     */
    showEditButton: function () {
        this._editButton.elem.show();
    },

    /**
     * Used to render content of the panel.
     * @param {jQuery DOM Object} cntr  jquery dom object.
     */
    setPanelContent: function (cntr) {
        cntr.append("<p>Panel Content</p>");
    },


    /**
     * specifies if the panel can be refresed or not.
     * @returns {Boolean}
     */
    canRefresh: function () {
        return this._config.canRefresh;
    },

    /**
     * specifies if the panel can be collapsed or not.
     * @returns {Boolean}
     */
    canCollapse: function () {
        return this._config.collapsible;
    },

    /**
     * This method will be called when edit button on is clicked on the panel.
     * Default implementions changes the state of the panel from readonly to edit mode.
     */
    onEditHandler: function () {
        this._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.EDIT_MODE);
    },

    /**
     * This method will be called when submit button is clicked in panel edit mode.
     * @returns {*|Promise}
     */
    onSubmit: function () {
        return true;
    },

    /**
     * enable submit action button on the panel header.
     */
    enableSubmitButton: function (enable) {
        this._submitButton.widget.enable();
    },

    /**
     * disable submit action button on the panel header.
     */
    disableSubmitButton: function () {
        this._submitButton.widget.disable();
    },

    /**
     * This method is used to toggle state of the panel btw readonly and edit.
     */
    toggleEditState: function () {
        if (this.isEditable()) {
            if (this.isReadOnly()) {
                this._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.EDIT_MODE);
            } else {
                this._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY);
            }
        }
    },


    /**
     * Used to change state of the panel.
     *
     * @param  {String} state Constants from infaw.ldm.threeSixty.abstractPanel.PANEL_STATE
     * @param  {Object} info other information related to the state change.
     */
    _setPanelState: function (state, info) {
        if (this.isEditable() && this._currentPanelState !== state) {

            var stateChangeObj = {
                current: state,
                previous: this._currentPanelState,
                invalidState: false
            };

            stateChangeObj.details = info ? info : {};

            switch (state) {
                case infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY:
                    this._cancelButton.elem.hide();
                    this._submitButton.elem.hide();
                    this.showEditButton();
                    break;

                case infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.EDIT_MODE:
                    this._cancelButton.elem.show();
                    this.disableSubmitButton();
                    this._submitButton.elem.show();
                    this.hideEditButton();
                    this._expandPanel();
                    break;

                default:
                    stateChangeObj.invalidState = true;
                    console.error(this._panelId + ":: Invalid panel state");
                    return;
            }
            this._currentPanelState = state;
            this.onStateChange(stateChangeObj);
        }
    },


    /**
     * Show loading within the panel when it is busy.
     * @param  {Boolean} loading if true loading state will be shown.
     */
    showLoading: function (loading) {
        var contentId = this._content.prop("id");
        if (loading === false) {
            $.unblockElem(contentId);
            this._header.find(".actionsCntr").show();
        } else {
            $.blockElem(contentId);
            this._header.find(".actionsCntr").hide();
        }
    },


    /**
     * @param  {Object} stateChangeObj This contains infomation of the state change.
     * @property {String} current Constants from infaw.ldm.threeSixty.abstractPanel.PANEL_STATE
     * @property {String} prev Constants from infaw.ldm.threeSixty.abstractPanel.PANEL_STATE
     * @property {Object} details Contains details of the state change.
     */
    onStateChange: function (stateChangeObj) {

    },

    /**
     * Method to refresh the panel.
     */
    refresh: function () {
        var self = this;
        $.when(this.isVisible()).done(function (isVisible) {
            if (self.canRefresh() && isVisible === true) {
                self._setPanelState(infaw.ldm.threeSixty.abstractPanel.PANEL_STATE.READ_ONLY);
                self.show();
                self.createUI();
            }
        });
    },

    /**
     * Called when panel is collapsed.
     * @callback
     */
    onCollapse: function () {},

    /**
     * Incase we need to refresh content on expand of panel.
     * use-case: charts are not rendered properly in collpased state and so we need to rerender on expand.
     * @return {Boolean}
     */
    refreshContentOnExpand: function () {
        return false;
    },

    /**
     * Called when panel is expanded.
     * @callback
     */
    onExpand: function () {},

    /**
     * @returns {object}
     * @property {string} tooltip  Tooltip to be shown on hover of help;
     * @property {string} url Doc link to be open on click;
     */
    getHelp: function () {
        return;
    }

});