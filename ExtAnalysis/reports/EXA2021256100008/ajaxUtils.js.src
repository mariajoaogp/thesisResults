// var EIC_CONFIGURATION = {
// 	"EIC_PROTOCOL" : "http",
// 	// "EIC_HOST" : "10.80.12.76:8080",

// 	"EIC_HOST" : "localhost:8080",
// 	"EIC_CONTEXT" : "eic",
	
// 	getUrl : function(){
// 		return this.EIC_PROTOCOL + "://" + this.EIC_HOST +"/"+ this.EIC_CONTEXT+"/";
// 	}
// }

EIC_CONFIGURATION = infa.extension.eicConfiguration;

	$(document).on('ajaxSend', function (event, request, settings) {

		// if (infa.utils.Utils.instance().getToken()) {
			// if (!settings.crossDomain) {
				request.setRequestHeader("infaToken",localStorage.getItem("infaToken"));
			// }
		// }
		//processSettings(settings);
	});
$.url = function(query)  {
    return EIC_CONFIGURATION.getUrl() + query ;
} 
$.renderSVG = function(){
    jQuery('img.svg').each(function(){
        var $img = jQuery(this);
        var imgID = $img.attr('id');
        var imgClass = $img.attr('class');
        var imgURL = $img.attr('src');
    
        jQuery.get(imgURL, function(data) {
            // Get the SVG tag, ignore the rest
            var $svg = jQuery(data).find('svg');
    
            // Add replaced image's ID to the new SVG
            if(typeof imgID !== 'undefined') {
                $svg = $svg.attr('id', imgID);
            }
            // Add replaced image's classes to the new SVG
            if(typeof imgClass !== 'undefined') {
                $svg = $svg.attr('class', imgClass+' replaced-svg');
            }
    
            // Remove any invalid XML tags as per http://validator.w3.org
            $svg = $svg.removeAttr('xmlns:a');
            $svg = $svg.removeAttr('title')
            // Check if the viewport is set, if the viewport is not set the SVG wont't scale.
            if(!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
                $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'))
            }
            //Remove Title Tag 
            $svg.find("title").remove();
            // Replace image with new SVG
            $img.replaceWith($svg);
    
        }, 'xml');
    
    });

}
$.getJSON = function(query, data){
    return $.ajax({
        url:query,
        dataType:"json"
    });
}
$.blockGetJson =  function(query, data){
    
   
    return $.backGroundAjax(EIC_CONFIGURATION.getUrl()  + query, data && data.data || data);
            
}
$.Class('infaw.ldm.core.I18nResources', {}) ;
$.Class('infaw.ldm.appConfiguration.I18nResources', {}) ;
$.Class("infa.i18n.TextUtils", {}) ;
$.Class("infaw.ldm.threeSixty.I18nResources", {}) ;

$.blockGetJSON = $.blockGetJson;
var _loginCurtain = {
    showMsg:function(a){
        console.log(a)
    },
    hide:function(){

    }
}

$.getLocalizedText = function(str,d){
    return d;
}
$.blockPostJson = function(url, data){
            
            var promise = $.backGroundAjax(
            EIC_CONFIGURATION.getUrl()  + url,
            data.data || data,
            "POST"
   );
    return promise;
}

$.blockPostJSON = $.blockPostJson;
$.infa= {
    Formats :{
        escapeComprehensive:function(a){
            return a
        }
    }
}

$.Class('symphony.pages.branding',{});
$.Class('infaw.ldm.NewLineage',{});
$.Class('infaw.ldm.search.I18nResources',{});
$.htmlId = function(a){
    var text = "";
    var possible = "_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_0123456789";
  
    for (var i = 0; i < 5; i++)
      text += possible.charAt(Math.floor(Math.random() * possible.length));
  
    return a+"_"+text;
}
$.Class('infa.i18n.TextUtils',{
    _instance: null,
    
            instance: function() {
                if (!infa.i18n.TextUtils._instance)
                    infa.i18n.TextUtils._instance = new infa.i18n.TextUtils();
                return infa.i18n.TextUtils._instance;
            }
},{
    getText:function(key){
        return key;
    }
}
);

$.getWidget = function($jQueryObj, widgetName) {		
    if($jQueryObj && widgetName) {
        var widget = $jQueryObj.data(widgetName);
        
        // TODO - currently needed b/c of jQuery upgrade
        // must remove the following statement when we fix extensibility code in widgets
        if(widget==undefined)
            widget=$jQueryObj.data(widgetName.replace('infa','extensible'));
        
        
        return widget;			
    }
};
$.suggestAjax = function(data,onSuccess,onError){
    $.backGroundAjax(data.url,{},data.type).then(function(d){
        onSuccess(d);
    }).fail(function(e){
        onError(e);
    });
}
$.backGroundAjax = function(query,data,method){
    var def = $.Deferred();
   // console.log(query,data)
    data = typeof data == "string" ? data : (data || {});
    chrome.runtime.sendMessage({
        data:  data,
        action: 'xhttp',
        url: query,
        method :data.method || method || "GET"
    }, function(data){
        def.resolve(data);
    })
    return def.promise();
}
$.blockGetJsonToBackground = function(query, data, successCallback, errorCallback){
    chrome.runtime.sendMessage({
        method: 'GET',
        action: 'xhttp',
        url: EIC_CONFIGURATION.getUrl() + query,
    }, successCallback)
}

$.blockPostJsonToBackground = function(query, data, successCallback, errorCallback){
    chrome.runtime.sendMessage({
        method: 'POST',
        action: 'xhttp',
        url: EIC_CONFIGURATION.getUrl() + query,
        data: data
    }, successCallback)
}

$.blockJsonToBackground = function(url, query, method, data, successCallback){
    chrome.runtime.sendMessage({
        method: method,
        action: 'xhttp',
        url:(url || EIC_CONFIGURATION.getUrl()) + query,
        data: data
    }, successCallback)
}

$.blockContainer = function(elem){
    $('.loading.modal').remove();
    elem = !elem ? "body": elem;    
    elem = typeof(elem) == "string" ? $(elem):elem;
    var container = elem.length == 0 ? $("body"): elem;  
    var overlay = $('<div class="loading modal" style="display: none"><div class="center"><img alt="Loading..." src="'+chrome.extension.getURL("res/images/preloader.gif")+'"/></div>').appendTo(container);
    overlay.show();
}

$.unBlockContainer = function(elem){
    elem = !elem ? "body": elem;    
    elem = typeof(elem) == "string" ? $(elem):elem;
    var container = elem.length == 0 ? $("body"): elem;
    var overlay = container.find(".loading.modal");
    overlay.remove();
}
$.loadTemplate = function(url, templateName){
	// var promise = resources[url];

	// if (promise != undefined)
	// return promise; //someone will wait on this one...

	promise = $.ajax({
	type     : 'GET',
	url      : url,
	dataType : 'text',
	cache    : true,
	}); 

	// resources[url] = promise;

	promise.done(function(tmplText){
	$.template(templateName, tmplText);
	});

	return promise;
};