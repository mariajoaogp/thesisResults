 $.widget('infa.propertiesView', {
     options: {
         readOnly: true,

         emptyMsg: "No Properties",

         cls: "",

         valueSeparator: "&nbsp;,&nbsp;",

         getPropName: function (propObj) {
             return propObj.name;
         },

         getPropValue: function (propObj) {
             return propObj.value;
         },

         getPropIcon: function (propObj) {
             return propObj.icon;
         },

         getValueId: function (value, propObj) {
             return value;
         },

         renderPropName: function (name, propObj) {
             return $("<span>" + (name ? name : "") + "</span>");
         },

         renderPropValue: function (value, propObj) {
             return $("<span>" + (value ? value : "") + "</span>");
         },

         renderPropIcon: function (icon, propObj) {
             return $("<img />", {
                 src: icon
             });
         },

         isClickable: function (value, propObj) {
             return $.isFunction(propObj.isClickable) ? propObj.isClickable(value, propObj) : propObj.isClickable;
         },

         propNameCls: function (propObj) {
             return propObj.nameCls ? propObj.nameCls : "";
         },

         propIconCls: function (propObj) {
             return propObj.iconCls ? propObj.iconCls : "";
         },

         propValueCls: function (propObj) {
             return propObj.valueCls ? propObj.valueCls : "";
         },

         getTooltip: function (propObj) {
             return propObj.tooltip ? propObj.tooltip : propObj.name;
         },

         getValueTooltip: function (value, propObj) {
             return value ? value : "";
         },

         data: {}
     },

     _create: function () {
         this._renderUI();
     },

     _renderUI: function () {
         self = this;
         this.element.empty();
         this._updatedValues = {};
         var cntr = $("<div></div>")
             .addClass("container-fluid propViewWidgetCntr")
             .addClass(this.options.cls)
             .appendTo(this.element);

         for (var key in this.options.data) {

             var eachRow = this.options.data[key];
             if (!eachRow.nameCls) {
                 eachRow.nameCls = "col-md-6";
             }
             if (!eachRow.valueCls) {
                 eachRow.nameCls = "col-md-6";
             }

             var name = this.options.getPropName(eachRow),
                 values = this.options.getPropValue(eachRow),
                 eachProp = $("<div></div>")
                 .addClass("row")
                 .appendTo(cntr);


             var propIcon = this.options.getPropIcon(eachRow);
             if (propIcon) {
                 $("<div></div>")
                     .addClass("propIcon")
                     .addClass(this.options.propIconCls(eachRow))
                     .append(this.options.renderPropIcon(propIcon, eachRow))
                     .appendTo(eachProp);
             }

             var _keyCntr = $("<div></div>")
                 .addClass("propName")
                 .addClass(this.options.propNameCls(eachRow))
                 .appendTo(eachProp),
                 _valueCntr = $("<div></div>")
                 .data("propId", key)
                 .addClass("propValues")
                 .addClass(this.options.propValueCls(eachRow))
                 .appendTo(eachProp);




             _keyCntr.prop("title", this.options.getTooltip(eachRow)).append(this.options.renderPropName(name, eachRow));

             if (this.options.readOnly) {
                 cntr.addClass("readOnly");
                 this._renderReadOnlyUI({
                     key: key,
                     eachRow: eachRow,
                     values: values,
                     valueCntr: _valueCntr
                 });
                 if (cntr.children().length === 0) {
                     $("<div>" + this.options.emptyMsg + "</div>").addClass("col-md-12 emptyMsg").appendTo(cntr);
                 }
                 cntr.on("click", ".propValues .eachValue.clickable", function () {
                     var ele = $(this),
                         valueId = ele.data("valueId"),
                         propId = ele.parent().data("propId");
                     cntr.trigger("propValueClick", [valueId, self.options.data[propId]]);
                 });
             } else {
                 cntr.removeClass("readOnly");
                 this._renderEditableUI({
                     key: key,
                     eachRow: eachRow,
                     values: values,
                     valueCntr: _valueCntr
                 });

                 cntr.on("onChange.CustomFormField", function () {
                    $(this).trigger("onChange.propViewEditmode");
                 });
             }
         }
     },

     setReadOnly: function (readOnly) {
         if (this.options.readOnly != readOnly) {
             this.options.readOnly = readOnly;
             this._renderUI();
         }
     },

     _renderEditableUI: function (config) {
         this._updatedValues = {};
         config.valueCntr.CustomFormField({
             dataType: config.eachRow.dataType,
             value: config.values
         });

         var widget = $.getWidget(config.valueCntr, "CustomFormField");
         if (widget) {
             var self = this;
             config.valueCntr.on("onChange.CustomFormField", function () {
                 var newValues = widget.getValue();
                 //Check if the user has really changed the value based on value comparision.
                 $.each(newValues, function (i, valObj) {
                     if (valObj.isDirty) {
                         valObj.isDirty = config.values[i] != valObj.value;
                     }
                 });
                 self._updatedValues[config.key] = newValues;
             });
         }
     },


     _renderReadOnlyUI: function (config) {

         var self = this,
             values = config.values,
             _valueCntr = config.valueCntr,
             eachRow = config.eachRow;

         if (!$.isArray(values)) {
             values = [values];
         }

         if (eachRow.dataType == infa.ldm.Utils.DATATYPE_CORE_RICHTEXT) {
             _valueCntr.RtfEditor({
                 readOnly: true,
                 disableResizeEditor: false,
                 content: values[0]
             });
         } else {
             $.each(values, function (index, value) {
                 if (index > 0) {
                     _valueCntr.append($("<div>" + self.options.valueSeparator + "</div>").addClass("separator"));
                 }
                 var valElem = $("<div>")
                     .addClass("eachValue " + eachRow.overflow)
                     .append(self.options.renderPropValue(value, eachRow));

                 var tooltip = self.options.getValueTooltip(value, eachRow);
                 if (tooltip) {
                     valElem.prop("title", tooltip);
                 }

                 if (self.options.isClickable(value, eachRow)) {
                     valElem.addClass("clickable");
                     var valId = self.options.getValueId(value, eachRow);
                     valElem.data("valueId", valId ? valId : "no_value_id");
                 }
                 _valueCntr.append(valElem);
             });
         }
     },

     setData: function (data, renderUI) {
         this.options.data = data;
         if (renderUI !== false)
             this._renderUI();
     },

     getEditedProperties: function () {
         return this._updatedValues;
     },

     _destroy: function () {
         this.element.empty();
     }

 });