/* @dpadukon
 * Pagination
 * * * * * * * * * * * * * * * * */
$.Class("infa.eic.crextension.Pagination",{},{

    init : function(data) {

        this.Init(data.container,data.data);
    },
    code: '',
    // --------------------
    // Utility
    // --------------------

    // converting initialize data
    Extend: function(data) {
        data = data || {};
        this.size = data.size || 300;
        this.page = data.page || 1;
        this.step = data.step || 3;
        this.onChange = data.onChange || function(){};
    },

    // add pages by number (from [s] to [f])
    Add: function(s, f) {
        for (var i = s; i < f; i++) {
            this.code += '<a>' + i + '</a>';
        }
    },

    // add last page with separator
    Last: function() {
        this.code += '<i>...</i><a>' + this.size + '</a>';
    },

    // add first page with separator
    First: function() {
        this.code += '<a>1</a><i>...</i>';
    },



    // --------------------
    // Handlers
    // --------------------

    // onChange page
    Click: function(a) {
        this.page = +a.innerHTML;
        this.Start();
        this.onChange();
    },

    // previous page
    Prev: function() {
        this.page--;
        if (this.page < 1) {
            this.page = 1;
        }
        this.Start();
        this.onChange();
    },

    // next page
    Next: function() {
        this.page++;
        if (this.page > this.size) {
            this.page = this.size;
        }
        this.Start();
        this.onChange();
    },



    // --------------------
    // Script
    // --------------------

    // binding pages
    Bind: function() {
        var a = this.e.getElementsByTagName('a');
        var self = this;
        for (var i = 0; i < a.length; i++) {
            if (+a[i].innerHTML === this.page) a[i].className = 'current';
            a[i].addEventListener('click', function(){
                self.Click(this)
            } , false);
        }
    },

    // write this
    Finish: function() {
        this.e.innerHTML = this.code;
        this.code = '';
        
        this.nex.innerHTML =  this.page == this.size? '<a class="disabled" onclick="return false;">&#9658;</a>':'<a>&#9658;</a>';
        this.pre.innerHTML =  this.page < 2? '<a class="disabled" onclick="return false;">&#9668;</a>':'<a>&#9668;</a>';
        this.Buttons();
        this.Bind();
    },

    // find this type
    Start: function() {
        if (this.size < this.step * 2 + 6) {
            this.Add(1, this.size + 1);
        }
        else if (this.page < this.step * 2 + 1) {
            this.Add(1, this.step * 2 + 4);
            this.Last();
        }
        else if (this.page > this.size - this.step * 2) {
            this.First();
            this.Add(this.size - this.step * 2 - 2, this.size + 1);
        }
        else {
            this.First();
            this.Add(this.page - this.step, this.page + this.step + 1);
            this.Last();
        }
        this.Finish();
    },



    // --------------------
    // Initialization
    // --------------------

    // binding buttons
    Buttons: function() {
        var self = this;
        function hasClass( target, className ) {
            return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
        }
        if(!hasClass(this.pre.children[0],"disabled")){
            this.pre.children[0].addEventListener('click',  function(){
                self.Prev(this)
            }, false);
        }
        if(!hasClass(this.nex.children[0]),"disabled"){
            this.nex.children[0].addEventListener('click',  function(){
                self.Next(this)
            }, false);
        }
    },

    // create skeleton
    Create: function(e) {

        var html = [
            '<span></span>', // previous button
            '<span></span>',  // this container
            '<span></span>'  // next button
        ];

        e.innerHTML = html.join('');
        this.e = e.getElementsByTagName('span')[1];
        this.pre = e.getElementsByTagName('span')[0];
        this.nex = e.getElementsByTagName('span')[2];
    },

    // init
    Init: function(e, data) {
        this.Extend(data);
        this.Create(e);
        this.Start();
    }



});



