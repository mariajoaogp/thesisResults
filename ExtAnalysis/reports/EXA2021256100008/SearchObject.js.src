infaw.ldm.LDMObject.extend('infaw.ldm.SearchObject', {  
	init: function(item) {
		this._super(item.id);

		this.setFacts(item.values);

        // show inferred only if there are no direct hits
		if (!_.isEmpty(item.inferredRelated) && !_.isEmpty(this._highlight)) {
			this.relatedSearch = {};
			
			// only pick the first inference
			var inference = item.inferredRelated[0];
			for(var i = 0; i < inference.values.length; i++) {
				this.relatedSearch[inference.values[i].id] = inference.values[i].value;
			}
			
			if (inference.relatedAssociations) {
				this.relatedSearchAssociation = inference.relatedAssociations[0];
			}
		}
		
		if (!_.isEmpty(item.inferredChildren) && !_.isEmpty(this._highlight)) {
			this.childrenSearch = {};
			
			// only pick the first inference
			var inference = item.inferredChildren[0];
			for(var i = 0; i < inference.values.length; i++) {
				this.childrenSearch[inference.values[i].id] = inference.values[i].value;
			}
		}
		
	},
	
	setFacts: function(values) {
		var highlight = this._highlight = {},
			facts = this._facts = {};
		
		for (var fact = 0; fact < values.length; fact++) {
			// FIX ME: extra condition added after new search api always returning the empty highlight array.
			if (!_.isEmpty(values[fact].highlights)) {
				var strArr = infa.ldm.Utils.getValue(values[fact].highlights).split('<em>');
				for(var i = 0; i < strArr.length; i++) {
					var newStrs = strArr[i].split('</em>');
					for(var j = 0; j < newStrs.length; j++) {
						newStrs[j] = $.infa.Formats.escapeComprehensive(newStrs[j]);
					}
					strArr[i] = newStrs.join('</b>');
				}
				//EBF-19618
				this._highlight[values[fact].attributeId] = strArr.join('<b>');
			}

			if(!facts[values[fact].attributeId]) {
				facts[values[fact].attributeId] = [];
			}
			facts[values[fact].attributeId].push(values[fact]);
		}
	},
	
	isHighlighted: function(factId) {
		return this._highlight[factId] ? true : false;
	},
	
	getHighlights: function() {
		return this._highlight;
	},
	
	getHighlightedValue: function(factId) {
		return this._highlight[factId];
	},
	setPermission: function(permission){
		this.permissionObject =permission;
	},
	getPermission:function(){
		this.permissionObject;
	}
});