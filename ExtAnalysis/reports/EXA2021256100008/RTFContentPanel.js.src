infaw.ldm.threeSixty.abstractPanel.extend('infaw.ldm.threeSixty.RTFContentPanel', {}, {

    setTitle: function (cntr) {
        cntr.append(this.getFactName());
    },

    getFactName: function () {
        var propObj = this._config.propObj;
        return propObj.name;
    },

    isEditable: function () {
        return true;
    },

    _createRTFContent: function (cntr, propObj, value) {
        var rtfCntr = $("<div></div>")
            .addClass("infaRichTextDesc")
            .appendTo(cntr);

        rtfCntr.RtfEditor({
            readOnly: true,
            disableResizeEditor: false,
            content: propObj.getDisplayValue(value)
        });

        this._rftEditor.push($.getWidget(rtfCntr, "RtfEditor"));
    },

    setPanelContent: function (panelCntr) {
        var propObj = this._config.propObj,
            cntr = $("<div></div>").addClass("rtfContentPanelCntr").appendTo(panelCntr);

        this._rftEditor = [];
        if (propObj.value && propObj.value.length > 0) {
            for (var i = 0; i < propObj.value.length; i++) {
                var value = propObj.value[i];
                this._createRTFContent(cntr, propObj, value);
            }
        } else {
            this._createRTFContent(cntr, propObj);
        }
    },

    toggleEditState: function (action, success) {
        if (this.isEditable()) {
            this._super();
            var readOnly = this.isReadOnly();
            $.each(this._rftEditor, function (i, editor) {
                if (action == "submit" && success)
                    editor.setValue(editor.getValue());
                editor.setReadOnly();
            });
        }
    },

    onSubmit: function (desc) {

        var propObj = this._config.propObj,
            newFacts = [];

        if (propObj.value.length > 0) {
            var deleteFacts = [];
            $.each(propObj.value, function (index, value) {
                deleteFacts.push({
                    attrUuid: propObj.fact,
                    value: propObj.value[0]
                });
            });
        }
        $.each(this._rftEditor, function (i, editor) {
            newFacts.push({
                attrUuid: propObj.fact,
                value: editor.getValue()
            });
        });

        var query = {
            providerId: "enrichment",
            updates: [{
                deleteFacts: deleteFacts,
                newFacts: newFacts,
                id: this.getObjectInfo().getId()
            }]
        };
        return $.blockPostJSON('/web.ldm.enrichment.access', $.toJSON(query), null, -1);
    }

});