infaw.ldm.threeSixty.abstractPanel.extend('infaw.ldm.threeSixty.propertiesPanel', {

    OVERFLOW: {
        SHOW_MORE: "SHOW_MORE",
        SHOW_ALL: "showAll",
        ELLIPSIS: "textEllipsis"
    }

}, {

    getProperties: function () {
        var deferred = $.Deferred();
        deferred.resolve({});
        return deferred.promise();
    },


    getPropertyConfig: function (prop, propId) {
        prop.overflow = prop.overflow ? prop.overflow : infaw.ldm.threeSixty.propertiesPanel.OVERFLOW.ELLIPSIS;
        prop.nameCls = "col-md-12";
        prop.valueCls = "col-md-12";

        if (prop.isEditable) {
            this._editableProperties.push(propId);
        }

        return prop;
    },

    beforeRender: function () {
        var self = this,
            deferred = $.Deferred();

        this._properties = {};
        this._editableProperties = [];

        this.getProperties()
            .done(function (props) {
                if ($.isEmptyObject(props)) {
                    self.hide();
                } else {
                    $.each(props, function (i, prop) {
                        var propId = $.htmlId("prop");
                        self._properties[propId] = self.getPropertyConfig(prop, propId);
                    });
                }
                deferred.resolve();
            });

        return deferred.promise();
    },

    isEditable: function () {
        return this._editableProperties.length > 0;
    },

    toggleEditState: function (action, success) {
        if (this.isEditable()) {
            this._super();
            if (this._propertiesView) {
                if (action == "submit" && success) {
                    this._propertiesView.setData(this._properties, false);
                }
                this._propertiesView.setReadOnly(this.isReadOnly());
            }

        }
    },

    getProperty: function (propId) {
        return this._properties[propId];
    },

    setProperty: function (propId, propObj) {
        this._properties[propId] = propObj;
    },

    getPropViewConfig: function (data) {
        return {
            data: data,
            cls: "commonPropView",
            valueSeparator: "",
            renderPropValue: function (value, propObj) {
                value = propObj.getDisplayValue(value);
                if (propObj.dataType == infa.ldm.Utils.DATATYPE_CORE_RICHTEXT) {
                    content = $("<div></div>")
                        .addClass("infaRichTextReadOnly")
                        .append(value);
                } else {
                    content = $("<span></span>").text(value);
                }
                return content;
            },
            getValueTooltip: function (value, propObj) {
                var tooltip;
                if (propObj.dataType != infa.ldm.Utils.DATATYPE_CORE_RICHTEXT) {
                    tooltip = value;
                }
                return tooltip;
            }
        };
    },

    setPanelContent: function (panelCntr) {

        var self = this,
            _prop = this._properties;

        if (this._propertiesView) {
            this._propertiesView.setData(_prop);
        } else {
            var config = this.getPropViewConfig(_prop);
            panelCntr.propertiesView(config);
            this._propertiesView = $.getWidget(panelCntr, "propertiesView");
        }

        panelCntr.on({
            "propValueClick": function (e, value, propObj) {
                self.eventHandler(e.type, value, propObj);
            },
            "onChange.propViewEditmode": function () {
                var props = self._propertiesView.getEditedProperties();
                if (self._hasPropsChanged(props))
                    self.enableSubmitButton();
                else
                    self.disableSubmitButton();

            }
        });
    },

    _hasPropsChanged: function (props) {
        var hasChanged = false;
        if (!$.isEmptyObject(props)) {
            for(var propId in props) {
                if(hasChanged) {
                    break;
                }
                var values = props[propId];
                for (var i = 0; i < values.length; i++) {
                    var value = values[i];
                    if (value.isDirty === true) {
                        hasChanged = true;
                        break;
                    }
                }
            }
        }
        return hasChanged;
    },

    eventHandler: function (eventType, value, propDetails) {
        if (eventType == "propValueClick") {

            if (propDetails.type == infaw.ldm.ThreeSixtyObject.FACT_TYPE.CUSTOM &&
                propDetails.dataType == infa.ldm.Utils.DATATYPE_CORE_STRING &&
                infa.ldm.Utils.isURL(value)) {
                window.open(value, "_blank");
            } else if (!$.isEmptyObject(propDetails.valueToObjIdMap)) {
                var projectObjId = propDetails.valueToObjIdMap[value],
                    obj = this.getObjectInfo().getProjectedFromObject(projectObjId);
                if (obj)
                    obj.open();
            }

        }
    },

    onSubmit: function (desc) {
        var deferred = $.Deferred(),
            newProps = this._propertiesView.getEditedProperties(),
            query = {
                providerId: "enrichment",
                updates: []
            };

        if (!$.isEmptyObject(newProps)) {
            var updateObj = {
                deleteFacts: [],
                newFacts: [],
                id: this.getObjectInfo().getId()
            };

            for (var propId in newProps) {
                var propObj = this.getProperty(propId),
                    currentValueObj = newProps[propId];

                if (currentValueObj.isDirty) {
                    if (propObj.value.length > 0) {
                        updateObj.deleteFacts.push({
                            attrUuid: propObj.fact,
                            value: propObj.value[0]
                        });
                    }
                    updateObj.newFacts.push({
                        attrUuid: propObj.fact,
                        value: currentValueObj.value
                    });
                }
            }
            query.updates.push(updateObj);

            $.blockPostJSON('/web.ldm.enrichment.access', $.toJSON(query), null, -1)
                .done(function () {
                    //Updating existing propObj with new value if successfull
                    for (var propId in newProps) {
                        var propObj = self.getProperty(propId);
                        propObj.value = [newProps[propId]];
                    }
                    deferred.resolve();
                }).fail(function () {
                    deferred.reject();
                });
        } else {
            deferred.resolve();
        }

        return deferred.promise();
    }

});