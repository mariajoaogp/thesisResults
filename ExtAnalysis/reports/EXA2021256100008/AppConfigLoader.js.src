(function () {

    var CONFIG_LOCATION = "/res/lib/config",
        CONFIG = {};


    function setConfiguration(type, config, deferred) {
        if (config) {
            CONFIG[type] = config;
            if (deferred) {
                deferred.resolve(config);
            }
        }
    }

    function getConfiguration(type) {
        return CONFIG[type];
    }

    $.Class('infaw.ldm.appConfigLoader', {

        _instance: null,

        getInstance: function () {
            if (!infaw.ldm.appConfigLoader._instance) {
                infaw.ldm.appConfigLoader._instance = new infaw.ldm.appConfigLoader();
            }
            return infaw.ldm.appConfigLoader._instance;
        }

    }, {

        getAppContext: function () {
            return symphony.pages.branding.appContext ? symphony.pages.branding.appContext : "default";
        },

        getConfiguration: function (configType, reload) {

            var deferred = $.Deferred(),
                configuration = getConfiguration(configType);

            if (reload === true || !configuration) {
                var appContext = this.getAppContext(),
                    configPath = CONFIG_LOCATION + "/${AppContext}/" + configType + ".json",
                    defaultConfigReq = $.blockGetJSON(configPath.replace("${AppContext}", "chromeExtension"), null, null, null, -1);

                function setDefaultConfig() {
                    defaultConfigReq.then(function (defaultConfig) {
                        setConfiguration(configType, defaultConfig, deferred);
                    }).fail(function () {
                        console.error(configType + " :: Not able to load default configuration");
                    });
                }

                if (appContext !== "default") {
                    var appContextReq = $.blockGetJSON(configPath.replace("${AppContext}", appContext), null, null, null, -1);
                    $.when(defaultConfigReq, appContextReq)
                        .then(function (defaultConfig, appContextConfig) {
                            setConfiguration(configType, $.extend(true, defaultConfig[0], appContextConfig[0]), deferred);
                        }).fail(function () {
                            console.error(configType + " :: Invalid app context '" + appContext + "'");
                            setDefaultConfig();
                        });

                } else {
                    setDefaultConfig();
                }

            } else {
                deferred.resolve(configuration);
            }

            return deferred.promise();

        }

    });
})();