$.widget('infa.RtfEditor', {

    options: {

        focus: true,

        preview: true,

        airMode: false,

        toolbar: [
            ['style', ['bold', 'italic', 'underline', 'clear']],
            ['fontsize', ['fontsize']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['insert', ['picture']],
            ['height', 'height']
        ],

        content: null,

        /**non-summernote options */
        readOnly: false
    },

    _create: function () {
        this._renderUI(this.options.readOnly);
    },

    _getSummerNoteOptions: function () {
        var opts = $.extend({}, this.options),
            propToDelete = ["readOnly", "content"];

        for (var opt in opts) {
            if (propToDelete.indexOf(opt) != -1) {
                delete opts[opt];
            }
        }

        return opts;

    },

    _renderUI: function (readOnly) {
        var self = this;
        if (!this._editorCntr) {
            this._editorCntr = $("<div></div>").addClass("eicRtfEditorCntr").appendTo(this.element);
            this._preview = $("<div></div>").addClass("urlPreviewCntr").hide().appendTo(this.element);
        }

        if (readOnly) {
            this._preview.addClass("readOnly");
            this._editorCntr.addClass("readOnly");
        } else {
            this._preview.removeClass("readOnly");
            this._editorCntr.removeClass("readOnly");
        }


        this._editorCntr.destroy().empty();
        if (readOnly) {

            this.options.content = this.options.content ? this.options.content : "";
            this._editorCntr.append(this.options.content);
            var prevUrl = this.getURLForPreview();
            if (prevUrl) {
                this.getURLMetaData(prevUrl)
                    .promise().done(function (metaData) {
                        self.showPreview(metaData, readOnly);
                    });
            } else {
                this._preview.hide();
            }
        } else {
            var timeout = null,
                getMetaData;
            this._editorCntr
                .summernote(this._getSummerNoteOptions())
                .on("summernote.change", function (e) {
                    $(this).trigger("onChange");
                    if (timeout) {
                        clearTimeout(timeout);
                        if (getMetaData) {
                            getMetaData.reject();
                        }
                    }
                    timeout = setTimeout(function () {
                        var prevUrl = self.getURLForPreview();
                        if (prevUrl) {
                            getMetaData = self.getURLMetaData(prevUrl);
                            getMetaData.promise().done(function (metaData) {
                                self.showPreview(metaData);
                            });
                        } else {
                            self._preview.hide();
                        }
                    }, 500);
                });
            if (this.options.content) {
                this.setValue(this.options.content);
            }
        }
    },

    showPreview: function (metaData) {
        if (metaData) {
            this._preview.empty();

            var thumbnail = $("<div><div class='image row'></div><div class='info row'></div></div>").addClass("panel panel-default"),
                infoCntr = thumbnail.find(".info.row"),
                imgCntr = thumbnail.find(".image.row");

            if (metaData.img) {
                var col = $("<div></div>", {
                    align: "center"
                }).addClass("col-md-12 image").appendTo(imgCntr);
                $("<img />", {
                    src: metaData.img.url
                }).css({
                    maxHeight: metaData.img.height,
                    maxWidth: metaData.img.width
                }).appendTo(col);

            } else {
                imgCntr.remove();
            }

            if (metaData.title) {
                $("<div></div>", {
                    title: metaData.title,
                    text: metaData.title
                }).addClass("col-md-12 title").appendTo(infoCntr);
            }

            if (metaData.description) {
                $("<div></div>", {
                    title: metaData.description,
                    text: metaData.description
                }).addClass("col-md-12 desc").appendTo(infoCntr);
            }

            this._preview.html(thumbnail).show();
            thumbnail.on("click", function () {
                window.open(metaData.href, "_blank");
            });
        }
    },

    setValue: function (value) {
        if (value) {
            value = $.infa.Validate.cleanXSSContent(value);
            this._editorCntr.code(value);
        }
        this.options.content = value;
    },

    getValue: function (text) {
        return text ? $(this._editorCntr.code()).text() : this._editorCntr.code();
    },

    setReadOnly: function (readOnly) {
        if (this.options.readOnly != readOnly) {
            this.options.readOnly = readOnly;
            this._renderUI(readOnly);
        }
    },

    getURLForPreview: function () {
        var textValue = this.getValue(true),
            info = linkify.find(textValue),
            urlFound = null;

        if (info.length > 0) {
            for (var i = 0; i < info.length; i++) {
                var details = info[i];
                if (details.type === "url") {
                    urlFound = details;
                    break;
                }
            }
        }

        if (urlFound) {
            urlFound = urlFound.href;
        }

        return urlFound;
    },

    getURLMetaData: function (url) {
        var deferred = $.Deferred(),
            self = this;

        $.ajax({
            type: "GET",
            url: "getHtmlContent?url=" + url
        }).then(function (res) {
            try {
                res = JSON.parse(res);
                var metaData = self._parseURLMetadata(res),
                    data = {
                        href: url
                    };

                if (metaData.title) {
                    data.title = metaData.title;
                }

                if (metaData.description) {
                    data.description = metaData.description;
                }

                if (metaData.image) {
                    data.img = {
                        url: metaData.image
                    };

                    $("<img/>", {
                        load: function () {
                            data.img.height = this.height;
                            data.img.width = this.width;
                            deferred.resolve(data);
                        },
                        error: function () {
                            data.img.url = "./res/img/360/grid_view.svg";
                            data.img.height = 48;
                            data.img.width = 48;
                            deferred.resolve(data);
                        },
                        src: data.img.url
                    });
                } else {
                    deferred.resolve(data);
                }

            } catch (e) {
                deferred.reject();
            }

        }).fail(function () {
            deferred.reject();
        });

        return deferred;
    },

    _parseURLMetadata: function (res) {
        var t = $("<div>").html(res.htmlString);
        var title = "",
            linkTags, metaTags;

        title = t.find("title").text();

        metaTags = t.find('meta');
        var meta = [],
            metaObject = {},
            property, href, isImageTag = false,
            imagePath, itemProp, content, name;
        for (var i = 0; i < metaTags.length; i++) {
            property = $(metaTags[i]).attr("property");
            itemProp = $(metaTags[i]).attr("itemprop");
            content = $(metaTags[i]).attr("content");
            name = $(metaTags[i]).attr("name");

            if (property && property.match(".*description$") != null || name && name.match(".*description$") != null)
                var description = content;

            else if (property && property.match(".*image$") != null || itemProp && itemProp.match(".*image$") != null) {
                imagePath = content;
                isImageTag = true;
            }

        }
        if (!isImageTag) {
            linkTags = t.find('link');
            var linkObject = {},
                rel, href, links = [];
            for (var i = 0; i < linkTags.length; i++) {
                rel = $(linkTags[i]).attr("rel");
                href = $(linkTags[i]).attr("href");
                if (rel == "shortcut icon" || rel == "icon")
                    imagePath = href;
            }
        }
        if (imagePath.indexOf('http://') === -1 && imagePath.indexOf('https://') === -1) {
            imagePath = res.domainName + '/' + imagePath;
        }
        var returnObject = {
            'image': imagePath,
            'title': title,
            'description': description
        };
        return returnObject;
    },

    _destroy: function () {
        this.element.empty();
    }

});