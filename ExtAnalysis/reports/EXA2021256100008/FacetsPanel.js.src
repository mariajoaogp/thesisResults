$.Class("infa.eic.crextension.Facets",{
    MAX_TO_DISPLAY:5,
},{
    ds:{},
   currentFilters :{},
   checkedItems:{},
   showHideFacets : function(){
     var p = this.container.parent();
     p.toggleClass("active");
     return p.hasClass("active")
   },
   init:function(c){
       var sidebar = $("<div class='sidebar-wrapper thin-scroll'></div>").appendTo(c.addClass("wrapper active"));
    //    var button = $('<a href="#" class="btn btn-sm"></a>').appendTo(sidebar);
    //    var self = this;
    //    button.html('<span class="glyphicon glyphicon-back"></span>');
    //    button.on('click',function(e){
    //        e.preventDefault();
    //        self.showHideFacets();
    //    })
       this.container = sidebar;
       this.panels = {};
       
   },
   //EBF-19618
   // This is to create a list of all the facets with labels and values we are going to display
   convertAuthFacets:function(response){
        this._facetslistMap={};
        var _facetslist = [];
        if (response && response.facets) {
            var facetFields = response.facets.facetFields;
            _facetslist=[...facetFields];
            // Query Facets
            // var queryFacets = response.facets.queryFacets;
            // if (queryFacets) {
            //     for (var i = 0; i < queryFacets.length; i++) {
            //         var queryFacet = queryFacets[i].rows[0].fq.match('(.*?):(.*)');
            //         if (queryFacet) {
            //             var facetId = queryFacet[1],
            //                 facetValue = queryFacet[2];

            //             /**
            //              * Replace exclude in query factes
            //              * For example :: exclude in rating will have {!ex=com.infa.ldm.entity.collaboration.rating0}com.infa.ldm.entity.collaboration.rating:[3.5 TO 5]
            //              * this will be changed to com.infa.ldm.entity.collaboration.rating:[3.5 TO 5]
            //              */
            //             var f=0,pos=0;
            //             facetId = facetId.replace(/^{!.*}/, "");
            //             for(var j=0;j<_facetslist.length;j++){
            //                 if(_facetslist[j].fieldName==facetId){
            //                     f=1;
            //                     pos=j;
            //                     break;
            //                 }
            //             }
            //             queryFacets[i].rows[0].fqValue=facetValue;
            //             if (f==0) {
            //                 var label=queryFacets[i].groupLabel;
            //                 if(facetId=="core.lastModified")
            //                 label="Last Updated"
            //                     // label=infa.LDM.Utils.LAST_UPDATED;
            //                 if(facetId=="-core.isProxy"){
            //                     label="Reference Assets" 
            //                     if(queryFacets[i].rows.length>0 && queryFacets[i].rows[0].value=="Exclude Reference Objects"){
            //                         queryFacets[i].rows[0].value="Exclude Reference Assets"
            //                     }
            //                 }
            //                 _facetslist.push({fieldName:facetId,groupLabel:label,rows:[...queryFacets[i].rows]});
            //             } else {
            //                 _facetslist[pos].rows=[..._facetslist[pos].rows,...queryFacets[i].rows];
            //             }
            //         }
            //     }
            // }
        }
        for(var i=0;i<_facetslist.length;i++){
            if(_facetslist[i].fieldName==infa.ldm.Utils.ATTR_CORE_CERTIFICATION){
                if(_facetslist[i].rows.length>0 && _facetslist[i].rows[0].value=="true"){
                    _facetslist[i].rows[0].value="Certified Assets"
                }
            }
        }
        for (var k = 0; k < _facetslist.length; k++)
            this._facetslistMap[_facetslist[k].fieldName] = _facetslist[k];
        return _facetslist;
   },
   render:function(data,incremental){
        var d = $.extend(true,{},data)
        this.data = data;
        this.container.empty();
        $(this.container).scrollTop(0);        
        if(!incremental){
            this.currentFilters ={};
            this.checkedItems={};
        }
        //EBF-19618
        var facetsObj={
            'facets': d
        };
        this._facets=this.convertAuthFacets(facetsObj)
        this._sortFacets(this._facets);
        for(var i=0;i< this._facets.length;i++){
            var facet = this._facets[i]; 
            !this.panels[facet.fieldName] ? this.panels[facet.fieldName] = []:"";
            var panel;
            if(facet.rows.length){
                panel = this.createDropabblePanel(facet.fieldName,facet.rows,facet.groupLabel);
            }
            if(panel){
                this.panels[facet.fieldName] = $(this.panels[facet.fieldName]).filter(function(a){ return !this.hasClass("panel-group")});                    
                this.panels[facet.fieldName].push(panel);
            }
        }
        //EBF-19618
        this.createFloatingPanel();
   },
   getFilterCriteria: function() {
    var filterCriterias = [],
        self = this;
    var facets= this.getFacets();
    $.each(this.getFacets(), function(facetId, facetCriteria) {
        if(facetCriteria) {
            var criteria = self._formatCriteria(facetId, facetCriteria);
            if(criteria && criteria.length > 0) {
                filterCriterias.push(criteria);
            }
        }
    });
    this.currentFilters = facets;
    return filterCriterias;
    },
    /**
     * Format criterias into string format
     */
    _formatCriteria : function(facetId, facetCriteria) {
        var criteria = "";
        for(var i = 0; i < facetCriteria.length; i++) {
            criteria += facetId + ':"' + RISON.urlencode(facetCriteria[i].value)+'"';
            if(i+1 < facetCriteria.length) {
                criteria += " OR ";
            }
        }
        return criteria;
    },
    //EBF-19618
    _sortFacets : function(facets){
        var _facetSortOrder = [
            // "com.infa.ldm.entity.collaboration.rating",
            infa.ldm.Utils.ATTR_CORE_RESOURCENAME,
            infa.ldm.Utils.ATTR_CORE_CLASSTYPE,
            infa.ldm.Utils.ATTR_CORE_RESOURCETYPE,
            // "core.lastModified",
            infa.ldm.Utils.ATTR_CORE_CERTIFICATION
        ];
        var o = _facetSortOrder.reverse();
        facets.sort(function(a,b){
            return (o.indexOf(a.fieldName) < o.indexOf(b.fieldName)) ? 1 : -1;
        });
    },
   getFacets : function(){
    var ds  = {};
    var self = this;
        for(var i in this.panels){
             var cbxs = [];
             this.panels[i].length && this.panels[i].each(function(e){
                var chxs  = this.find('.i-cbx:not(.all):checked')
                 chxs.each(function(e){
                    cbxs.push(this)
                 })
             });
                ds[i] = [];
                cbxs.forEach(function(e){
                    if(self.checkedItems && self.checkedItems[i] &&  self.checkedItems[i][e.value]){
                        var _facetElementValue=e.value;
                        self._facetslistMap[i].rows.forEach(element =>{
                            if(element.value==e.value){
                                if(element.fqValue)
                                _facetElementValue=element.fqValue
                            } 
                        })
                        ds[i].push({value:_facetElementValue,count:($(e).next().next().text() || "").replace(/[()]/g,"")});
                    }
                })
        }
    return ds;
   },
   setFacets : function(ds,data){
       
   },
   showHideFloatingPanel : function(list){
    this.container.toggleClass("active");
    if(list && list.data && list.data.length) {
        var datasec = this.container.find(".sidebar-wrapper .data-section").empty();
        this.panels[list.label] = $(this.panels[list.label]).filter(function(a){ return !this.hasClass("data-section")});      
        this.panels[list.label].push(datasec);
        datasec.data("id",list.label);
        this.createCheckboxList(datasec,list,true) 
    } 
   },
   createFloatingPanel : function(){
    var self = this;
    this.container.addClass("wrapper active").append(['<div class="sidebar-wrapper thin-scroll">',
        '<nav id="spy"><ul class="sidebar-nav nav">',
        '<li class="sidebar-brand">',
        '<a href="#" class="back">Back</span></a>',
        '</li></ul></nav><div class="data-section"></div><div class="data-footer"></div></div>'].join(""));
    this.container.find(".sidebar-wrapper .back").on('click',function(e){
        e.preventDefault();
        self.showHideFloatingPanel();
        self.reRenderList();
    });
    /* this.container.find(".sidebar-wrapper .data-footer").append(
        ['<button class="btn btn-primary btn-ok">OK</button>',
        ].join("")
    ); */
    this.container.find(".sidebar-wrapper").on('click','.btn',function(){
        var type = $(this).parents(".data-section").data("id");
        self.showHideFloatingPanel();
        self.reRenderList();
    });                                        
    this.container.find(".sidebar-wrapper").on('click','input[type=checkbox]',function(e){
        var label = self.container.find(".sidebar-wrapper .data-section").data('id');
        if(!self.checkedItems[label]){self.checkedItems[label]={} }
        
        if($(this).is(":checked")){
            if($(this).val()=="All"){
                self.checkedItems[label]={};
            }
            self.checkedItems[label][$(this).val()]= true;
        }else{
            delete self.checkedItems[label][$(this).val()];
        }
    });
   },
   createDropabblePanel : function(label,data,groupLabel){
    if(data.length < 1) return null;
    var self = this;
    var panel = $( '<div class="panel-group"></div>').appendTo(this.container); 
    var id = $.htmlId("facet");
    var refAttr = infa.eic.AppConfigData.instance().getReferenceAttribute(label);
    //EBF-19618
    var map = {"core.resourceName":"Resource Name",
    "core.classType":"Asset Type",
        "core.resourceType":"Resource Type",
        "com.infa.ldm.profiling.dataDomainsAll":"Data Domain",
        "com.infa.ldm.profiling.compositeDomainsAll":"Composite Data Domain"
        };
    if(!map[label]){
        // infa.eic.AppConfigData.instance().getLabel(refAttr||label,"attributes").done(function(label){
        //     panel.find('#panel_'+ id +' .title-value').text(label).attr('title',label)
        // });
        // panel.find('#panel_'+ id +' .title-value').text(groupLabel).attr('title',groupLabel)
        map[label]=groupLabel;
    }
    panel.html( [
    '<div class="panel panel-default">',
    '<div class="panel-heading"><h4 data-toggle="collapse" id="panel_'+ id +'" data-target="#'+ id +'" class="panel-title">',
    '<span  class="title-value" title="'+ map[label] +'">'+  map[label] +'</span></h4></div>',
    '<div class="collapse in" id="'+ id +'" class="panel-collapse ">',
    '<div class="panel-body"></div><div class="panel-footer"></div></div></div>'].join(""));
    data.unshift({
        "value":"All",
        'cls':"all"
    });
    panel.find(".panel").data("id",label);
    
    panel.on('click','.panel-title',function(e){
        $(this).toggleClass("collapsed");
    });
    panel.on('click','input[type=checkbox]',function(e){
        var label = $(this).parents(".panel").data('id');
        if(!self.checkedItems[label]){self.checkedItems[label]={} }
        if($(this).is(":checked")){
            if($(this).val()=="All"){
                self.checkedItems[label]={};
            }
            self.checkedItems[label][$(this).val()]= true;
        }else{
            delete self.checkedItems[label][$(this).val()];
        }
    });
    this.createCheckboxList(panel.find(".panel-body"),{
        label:label,data:data});
    var defArray = [];
    if(label == "core.classType" ){
        $.each(data,function(i){
            var d  = data[i];
            if(d.value != "All"){
                defArray.push(infa.eic.AppConfigData.instance().getLabel(d.value,"classes").done(function(label){
                    data[i].newValue = label;
                }));
            }
        });
    }
    $.when.apply($,defArray).done(function(){
        self.createFooter(panel.find(".panel-footer"),{
            label:label,data:data})
    });
    return panel;
   },
   clearFilters:function(){
        this.currentFilters ={};
        this.checkedItems={};
   },
   createFooter:function(container,list){
    var footer = $( '<div class="footer-toolbar"></div>').appendTo(container),suggestions; 
    footer.html(['<input class="find" type="text"/>',
    '<span class="show-more link">Show more</span>'].join(""));
    var self = this,datumTokenizer;
    if(list.label == "core.classType"){
        datumTokenizer = Bloodhound.tokenizers.obj.whitespace('newValue')
    }else{
        datumTokenizer = Bloodhound.tokenizers.obj.whitespace('value')
    }
     suggestions = new Bloodhound({
        datumTokenizer: datumTokenizer,
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: list.data
      }); 
      footer.find(".find").typeahead({
        hint: false
      },
      {
        name: 'suggestion',
        source: suggestions,
        display:function(obj){
            return obj.newValue || obj.value;
        }
      }).bind('typeahead:select',function(e,selected){
        var label = $(this).parents(".panel").data('id');
        if(!self.checkedItems[label]){
            self.checkedItems[label]={};
        }
        self.checkedItems[label][selected.value]= true;
        self.reRenderList();
      });
    footer.on('click','.show-more',function(){
        self.showHideFloatingPanel(list);
    });
   },
   reRenderList:function(list){
        this.render(this.data,true)
   },
   isChecked : function(list,ele){
        var ret = false;
        this.checkedItems && this.checkedItems[list] && $.each(this.checkedItems[list],function(i){
            if(i == ele){
                ret = true;
            }
        });
        this.currentFilters && this.currentFilters[list] && this.currentFilters[list].forEach(function(i){
           if(i.value == ele && ret){
               ret = true;
           }
        });
        
        return ret;
   },
   hasInfilter:function(label,value){
    var ret = false;
    this.currentFilters[label] && this.currentFilters[label].forEach(function(i){
        if(i.value == value){
            ret = true;
        }
    });
    this.checkedItems && this.checkedItems[label] && $.each(this.checkedItems[label],function(i){
        if(i == value){
            ret = true;
        }
    });
    return ret;
   },   
   createCheckboxList:function(container,list,showall){
     var self = this;
     var cont = $("<ul class='cbox-list-ul'></ul>");
     this.ds[list.label] =[];
     var types = [];
     if(list.label=="core.classType"){
        list.data.forEach(function(e,i) {
            if((i != 0 && i < infa.eic.crextension.Facets.MAX_TO_DISPLAY) || showall){
                types.push(e.value)
            }
        });
     }
    $.when(infa.eic.AppConfigData.instance().rePopulateRequiredTypes(types)).then(function(){
        list.data.forEach(function(element,i) {
            
            var show = parseInt(element.count);
            var isInFilter = self.hasInfilter(list.label,element.value);
            if(!showall){
                if(i > infa.eic.crextension.Facets.MAX_TO_DISPLAY && !isInFilter){
                    return;
                }
            }

            function renderTemplate(elem,newlabel,showall){
                var id = $.htmlId("da");
                var label = newlabel || elem.value;
                label = label.replace(/\//g,", ");
                var show = parseInt(element.count);
                var isInFilter = self.hasInfilter(list.label,element.value);
                if(!isNaN((showall)||show) || isInFilter)
                cont.append([
                    '<li>',
                    '<span class="cbx-st-cls ">',
                    '<input '+  (self.isChecked(list.label,elem.value) ? "checked":"") +' class="i-cbx '+ element.cls +'" type ="checkbox" id="'+ id +'" value="'+ element.value +'"/>',
                    '<label title="'+label+'" for="'+ id +'" ><span class="cbx-label">',
                     label,            
                    '</span></label>',
                    !isNaN((showall && element.count)||show) ? '<span class="cbx-count">('+ element.count +')</span>':'' ,
                    '</li>'
                ].join(""));
                cont.appendTo(container);
                cont.on('click','.i-cbx',function(){
                   var _this =  $(this);
                   var checked = _this.is(":checked");
           
                   
                   var others =  _this.parents('.cbox-list-ul').find('.i-cbx:not(.all)');
                   if(_this.hasClass('all') && checked ){
                       others.prop('checked', false);
                   }else if(checked){
                       _this.parents('.cbox-list-ul').find('.i-cbx.all').prop('checked', false);
                       self.ds[list.label].push(_this.val());
                   }else{
                       var removeItem = _this.val();
                       self.ds[list.label]  = $.grep(self.ds[list.label]
                           , function(value) {
                           return value != removeItem;
                       });
                   }
                });
                if(cont.find("input[type=checkbox]:not(.all):checked").length < 1){
                    cont.find("input[type=checkbox].all").prop("checked",true);
                }else{
                    cont.find("input[type=checkbox].all").prop("checked",false);
                }
                   
            }
            if(list.label == "core.classType" && element.value != "All"){
                infa.ldm.Utils.isClassifierType(element.value).done(function(isClassifier){
                    !isClassifier && infa.eic.AppConfigData.instance().getLabel(element.value,"classes").done(function(label){
                        renderTemplate(element,label,showall);
                    });
                });
               
            }else{
                renderTemplate(element);
            }
           
        });
       
    });
    
    


} 
});
    
