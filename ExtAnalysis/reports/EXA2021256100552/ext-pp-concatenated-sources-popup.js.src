// Copyright 2021 Protopage Ltd.  All rights reserved.

let e = 1.32;

let t = true;

let o = false;

let n = false;

let i = "https://chrome.google.com/webstore/detail/protopage-start-page/hjgoljmnaepbdpeadpciimeapgjadenc/reviews";

function r(e) {
    if (typeof e == "string") e = document.getElementById(e);
    if (!e) return;
    while (e.childNodes.length > 0) e.removeChild(e.childNodes[0]);
}

function d(e, t) {
    if (e == null || t == null) return false;
    return e.lastIndexOf(t) === e.length - t.length;
}

function c(e, t) {
    e = e.substring(e.indexOf("?") + 1);
    let o = e.split("&");
    for (let e in o) {
        let n = o[e].split("=");
        if (n[0] == t) {
            return decodeURIComponent(n[1]);
        }
    }
    return undefined;
}

function l(e) {
    let t = e;
    if (e.lastIndexOf("/") > 10) t = t.substring(e.lastIndexOf("/") + 1);
    if (t.length < 2) t = e.substring(e.indexOf("//") + "//".length);
    return t;
}

let u = "https://www.protopage.com/";

let a = "chrome";

function s() {
    window["_gaq"] = window["_gaq"] || [];
    window["_gaq"].push([ "_setAccount", "UA-3138980-3" ]);
    window["_gaq"].push([ "_trackPageview" ]);
    let e = document.createElement("script");
    e["type"] = "text/javascript";
    e["async"] = true;
    e["src"] = "https://ssl.google-analytics.com/ga.js";
    let t = document.getElementsByTagName("script")[0];
    t.parentNode.insertBefore(e, t);
}

function m(e, t, o, n, i) {
    if (window["_gaq"]) window["_gaq"].push([ "_trackEvent", e, t, o, n, i ]);
}

function f(e, t, o) {
    if (!e && e != 0) return "";
    for (let n = 0; n < e.length; n++) {
        if (e.charAt(n) == t) e = e.substring(0, n) + o + e.substring(n + 1, e.length);
    }
    return e;
}

function p(e, t) {
    if ((e || e == "") && t) {
        e = e.toLowerCase();
        t = t.toLowerCase();
        if (t.indexOf("http://") === 0 || t.indexOf("https://") === 0) {
            t = t.substring(t.indexOf("://") + "://".length);
            if (t.indexOf("?") !== -1) t = t.substring(0, t.indexOf("?"));
            if (t.indexOf("#") !== -1) t = t.substring(0, t.indexOf("#"));
            if (t.indexOf("www.") === 0) t = t.substring("www.".length);
            if (t.indexOf("dev.") === 0) t = t.substring("dev.".length);
            if (t.indexOf(":") !== -1) {
                if (t.indexOf("/") !== -1) t = t.substring(0, t.indexOf(":")) + t.substring(t.indexOf("/")); else t.substring(0, t.indexOf(":"));
            }
            if (t.indexOf("/") === t.length - 1) t = t.substring(0, t.length - 1);
            if (e === "" && t === "protopage.com") return true;
            if (t === "protopage.com/" + e) return true;
        }
    }
}

function g(e, t) {
    chrome.tabs.update(e["id"], {
        active: true
    }, (() => {
        chrome.windows.update(e["windowId"], {
            focused: true
        }, (() => {
            if (t) t();
        }));
    }));
}

function h(e, t) {
    chrome.tabs.query({}, (o => {
        let n = false;
        for (let i in o) {
            let r = o[i];
            let d = r["url"];
            if (d.indexOf("#") !== -1) d = d.substring(0, d.indexOf("#"));
            if (d.indexOf("?") !== -1) d = d.substring(0, d.indexOf("?"));
            if (e === d) {
                n = true;
                g(r, (() => {
                    if (t) t(r, true);
                }));
                break;
            }
        }
        if (!n) {
            chrome.tabs.create({
                url: e,
                index: 0
            }, (e => {
                if (t) t(e, false);
            }));
        }
    }));
}

function w(e, t) {
    let o = t => {
        if (!t && t !== "") return;
        chrome.tabs.query({}, (o => {
            let n = false;
            for (let i in o) {
                let r = o[i];
                if (p(t, r["url"])) {
                    n = true;
                    e(r);
                    break;
                }
            }
            if (!n) {
                let o = t !== "";
                chrome.tabs.create({
                    url: u + t,
                    pinned: false,
                    index: 0
                }, (t => {
                    e(t);
                }));
            }
        }));
    };
    if (!t && t !== "") {
        k().then((e => o(e)));
    } else {
        o(t);
    }
}

async function v() {
    let e = await new Promise(((e, t) => {
        chrome.cookies.getAll({
            domain: "protopage.com"
        }, (t => {
            e(t);
        }));
    }));
    let t, o;
    e.forEach((e => {
        if (e["name"] === "login") o = e;
        if (e["name"].startsWith("untitled-")) t = e;
    }));
    let n = new Set;
    if (o) {
        let e = o["value"];
        if (e) {
            e = f(e, '"', "");
            if (e) {
                e.split(":").forEach((e => {
                    if (e) n.add(e);
                }));
            }
        }
    }
    if (t) {
        n.add("");
    }
    return n;
}

async function k() {
    let e = undefined;
    let t = await v();
    let o = window.localStorage["protopagePathSelection"];
    if (o !== undefined && t.has(o)) {
        e = o;
    } else if (t.size > 0) {
        let o = Array.from(t);
        o.sort();
        e = o[0];
        if (e === "" && t.size > 1) {
            e = o[1];
        }
    }
    return e;
}

function b(e, t, o) {
    chrome.tabs.query({}, (n => {
        let i = false;
        for (let t in n) {
            let r = n[t];
            if (p(e, r["url"])) {
                i = true;
                o(r);
                break;
            }
        }
        if (!i) {
            chrome.tabs.create({
                url: t,
                pinned: false,
                index: 0
            }, (e => {
                o(e);
            }));
        }
    }));
}

function D(e, t, o) {
    b(e, t, (e => {
        chrome.tabs.update(e["id"], {
            url: t
        }, (() => {
            g(e, o);
        }));
    }));
}

async function I(e) {
    return new Promise(((t, o) => {
        window.chrome.windows.getAll({
            populate: !!e
        }, (e => {
            if (chrome.runtime.lastError) {
                o(chrome.runtime.lastError.message);
            } else {
                t(e);
            }
        }));
    }));
}

class x {
    constructor(e, t) {
        this.label = e;
        this.t = t;
        this.element = document.createElement("div");
        this.element.style.display = "inline-block";
        this.o = document.createElement("input");
        this.o.type = "checkbox";
        this.o.onclick = e => this.i();
        let o = document.createElement("span");
        o.appendChild(document.createTextNode(e));
        o.style.paddingLeft = "4px";
        o.style.fontSize = "10px";
        o.style.color = "#333";
        o.style.verticalAlign = "middle";
        o.onclick = e => this.o.click();
        this.o.style.cursor = "pointer";
        this.element.style.cursor = "pointer";
        this.element.style.paddingRight = "10px";
        this.element.appendChild(this.o);
        this.element.appendChild(o);
    }
    l(e) {
        this.o["checked"] = e;
    }
    i() {
        if (this.o.checked) this.t(true); else this.t(false);
    }
}

s();

function C(e, t) {
    let o = u + "_api/qrCode?url=" + encodeURIComponent(e);
    o += "&app=" + a + "Extension";
    if (t) o += "&path=" + encodeURIComponent(t);
    return o;
}

function T(e) {
    document.getElementById("notLoggedInDiv").style.display = "none";
    document.getElementById("loggedInChoicesDiv").style.display = "none";
    document.getElementById("loggedInDiv").style.display = "none";
    document.getElementById("qrInfoDiv").style.display = "none";
    document.getElementById("helpDiv").style.display = "none";
    document.getElementById("reviewLinkSpan").onclick = e => {
        chrome.tabs.create({
            url: i
        });
        m("General", "review");
    };
    if (e === "qrInfo") {
        document.getElementById("qrInfoDiv").style.display = "block";
        document.getElementById("qrInfoBack").onclick = e => {
            T();
        };
        chrome.tabs.query({
            active: true,
            windowId: chrome.windows["WINDOW_ID_CURRENT"]
        }, (e => {
            let t = e[0]["url"];
            document.getElementById("qrCodeImg2").src = C(t);
        }));
    } else if (e === "help") {
        document.getElementById("helpDiv").style.display = "block";
        document.getElementById("helpBack").onclick = e => {
            T();
        };
    } else {
        k().then((e => {
            if (e === undefined) {
                document.getElementById("notLoggedInDiv").style.display = "block";
                document.getElementById("notLoggedInDivCreateProtopage").onclick = e => {
                    h(u + "?ref=chrome-ext-create");
                    m("General", "createNewProtopage2");
                };
                document.getElementById("notLoggedInDivLogInToProtopage").onclick = e => {
                    h(u + "login");
                    m("General", "logInToExistingProtopage2");
                };
            } else {
                if (window.localStorage["newProtopagePathSelectionRequired"] !== "true") {
                    document.getElementById("loggedInDiv").style.display = "block";
                    document.getElementById("chooseADifferentProtopageDiv").onclick = e => {
                        window.localStorage["newProtopagePathSelectionRequired"] = "true";
                        T();
                    };
                    document.getElementById("extensionHelpDiv").onclick = e => {
                        T("help");
                        m("General", "help");
                    };
                    document.getElementById("whatIsThisLink").onclick = e => {
                        T("qrInfo");
                        m("General", "qrHelp");
                    };
                    r(document.getElementById("loggedInProtopagePathSpan"));
                    document.getElementById("loggedInProtopagePathSpan").appendChild(document.createTextNode(e));
                    document.getElementById("loggedInProtopageSpan").onclick = e => {
                        chrome.runtime.sendMessage({
                            type: "visitProtopage"
                        }, (e => {}));
                        m("General", "visitExistingProtopage");
                        setTimeout((() => window.close()), 100);
                    };
                    document.getElementById("loggedInDivProtopageLogo").onclick = e => document.getElementById("loggedInProtopageSpan").onclick();
                    chrome.tabs.query({
                        active: true,
                        windowId: chrome.windows["WINDOW_ID_CURRENT"]
                    }, (t => {
                        let o = t[0];
                        r("currentTabTitle");
                        r("currentTabUrl");
                        document.getElementById("currentTabTitle").appendChild(document.createTextNode(t[0]["title"]));
                        document.getElementById("currentTabUrl").appendChild(document.createTextNode(t[0]["url"]));
                        let n = o["url"];
                        let i = o["title"];
                        document.getElementById("addCurrentPageAsBookmarkDiv").onclick = t => {
                            let o = u + e + "?importUrl=" + encodeURIComponent(n) + "&importLabel=" + encodeURIComponent(i) + "&importType=link&importMethod=" + a + "Extension";
                            D(e, o, (() => window.close()));
                            m("General", "addAsBookmark");
                        };
                        document.getElementById("addCurrentPageAsAutodetectNewsFeedDiv").onclick = t => {
                            let o = u + e + "?importUrl=" + encodeURIComponent(n) + "&importType=feed" + "&importMethod=" + a + "Extension";
                            D(e, o, (() => window.close()));
                            m("General", "addAsFeed");
                        };
                        document.getElementById("qrCodeImg").src = C(n, e);
                        if (n.indexOf("http://") === 0 || n.indexOf("https://") === 0) {
                            window.chrome.tabs.executeScript(t[0]["id"], {
                                file: "ext-pp-concatenated-sources-contentscript.js",
                                runAt: "document_end"
                            }, (() => {}));
                            let o = 100;
                            let n = 2e4 / o;
                            function d() {
                                let i = chrome.extension.getBackgroundPage()["urlFeeds"][t[0]["url"]];
                                if (i) {
                                    if (i.length > 0) {
                                        document.getElementById("addCurrentPageAsAutodetectNewsFeedDiv").style.display = "none";
                                        document.getElementById("rssFeedsDetectedDiv").style.display = "block";
                                        let t = document.getElementById("rssFeedsDetectedListDiv");
                                        for (let o of i) {
                                            let n = document.createElement("div");
                                            n.style.backgroundImage = "url(images/rss.png)";
                                            n.style.backgroundRepeat = "no-repeat";
                                            n.style.backgroundPosition = "0px 2px";
                                            n.style["background-size"] = "16px 16px";
                                            n.style.paddingLeft = "20px";
                                            n.style.paddingBottom = "6px";
                                            let i = document.createElement("span");
                                            i.className = "clickable";
                                            i.style.paddingLeft = "20px";
                                            i.style.paddingTop = "8px";
                                            i.style.fontSize = "12px";
                                            i.appendChild(document.createTextNode("Add as news widget"));
                                            i.onclick = t => {
                                                D(e, u + e + "?importUrl=" + encodeURIComponent(o.href) + "&importType=feed" + "&importMethod=" + a + "Extension", (() => window.close()));
                                                m("General", "addDetectedFeed");
                                            };
                                            n.appendChild(document.createTextNode(o.title));
                                            n.appendChild(i);
                                            t.appendChild(n);
                                        }
                                    }
                                } else {
                                    if (n-- > 0) setTimeout(d, o);
                                }
                            }
                            d();
                        }
                    }));
                    let t = new x("Open Protopage tab at browser startup", (e => {
                        window.localStorage["disablePinProtopageOnStartup"] = !e;
                    }));
                    t.l(window.localStorage["disablePinProtopageOnStartup"] !== "true");
                    r(document.getElementById("settingsDiv"));
                    document.getElementById("settingsDiv").appendChild(t.element);
                    chrome.tabs.query({
                        currentWindow: true
                    }, (t => {
                        let o = [];
                        for (let n of t) {
                            if ((n["url"].indexOf("http://") === 0 || n["url"].indexOf("https://") === 0) && !p(e, n["url"])) o.push(n);
                        }
                        if (o.length > 0) {
                            document.getElementById("currentTabsSectionDiv").style.display = "block";
                            let e = o.length;
                            let t = e === 1 ? e + " tab" : e + " tabs";
                            let n = e === 1 ? e + " tab is" : e + " tabs are";
                            let i = e === 1 ? "this" : "these";
                            r(document.getElementById("addCurrentTabsAsBookmarkTitleDiv"));
                            document.getElementById("addCurrentTabsAsBookmarkTitleDiv").appendChild(document.createTextNode(n + " open in the current window"));
                            r(document.getElementById("addCurrentTabsAsBookmarkActionDiv"));
                            document.getElementById("addCurrentTabsAsBookmarkActionDiv").appendChild(document.createTextNode("Add " + i + " " + t + " as a new bookmarks widget"));
                            let d = [];
                            for (let e in o) {
                                let t = {
                                    url: o[e]["url"],
                                    title: o[e]["title"]
                                };
                                d.push(t);
                            }
                            document.getElementById("addCurrentTabsAsBookmarkActionDiv").onclick = e => {
                                chrome.extension.getBackgroundPage()["invokeProtopageFromExtension"]({
                                    method: "addBookmarksWidget",
                                    bookmarks: d
                                }, (e => {}));
                                m("General", "addBookmarksWidget");
                            };
                        } else {
                            document.getElementById("currentTabsSectionDiv").style.display = "none";
                        }
                    }));
                } else {
                    document.getElementById("loggedInChoicesDiv").style.display = "block";
                    r(document.getElementById("loggedInChoicesListDiv"));
                    v().then((e => {
                        e.forEach((e => {
                            let t = document.createElement("div");
                            t.style.paddingTop = "8px";
                            t.className = "clickable";
                            let o = document.createElement("span");
                            o.appendChild(document.createTextNode("protopage.com/"));
                            let n = document.createElement("span");
                            n.style.fontWeight = "700";
                            n.appendChild(document.createTextNode(e));
                            t.appendChild(o);
                            t.appendChild(n);
                            t.onclick = t => {
                                window.localStorage["newProtopagePathSelectionRequired"] = "false";
                                window.localStorage["protopagePathSelection"] = e;
                                setTimeout((() => T()), 1);
                            };
                            document.getElementById("loggedInChoicesListDiv").appendChild(t);
                        }));
                    }));
                }
            }
        }));
    }
}

document.addEventListener("DOMContentLoaded", (() => T()));