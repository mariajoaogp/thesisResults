// Copyright 2021 Protopage Ltd.  All rights reserved.

let e = 1.32;

let t = true;

let o = false;

let n = false;

let i = "https://chrome.google.com/webstore/detail/protopage-start-page/hjgoljmnaepbdpeadpciimeapgjadenc/reviews";

function r(e) {
    if (typeof e == "string") e = document.getElementById(e);
    if (!e) return;
    while (e.childNodes.length > 0) e.removeChild(e.childNodes[0]);
}

function d(e, t) {
    if (e == null || t == null) return false;
    return e.lastIndexOf(t) === e.length - t.length;
}

function c(e, t) {
    e = e.substring(e.indexOf("?") + 1);
    let i = e.split("&");
    for (let e in i) {
        let o = i[e].split("=");
        if (o[0] == t) {
            return decodeURIComponent(o[1]);
        }
    }
    return undefined;
}

function l(e) {
    let t = e;
    if (e.lastIndexOf("/") > 10) t = t.substring(e.lastIndexOf("/") + 1);
    if (t.length < 2) t = e.substring(e.indexOf("//") + "//".length);
    return t;
}

let u = "https://www.protopage.com/";

let a = "chrome";

function s() {
    window["_gaq"] = window["_gaq"] || [];
    window["_gaq"].push([ "_setAccount", "UA-3138980-3" ]);
    window["_gaq"].push([ "_trackPageview" ]);
    let e = document.createElement("script");
    e["type"] = "text/javascript";
    e["async"] = true;
    e["src"] = "https://ssl.google-analytics.com/ga.js";
    let t = document.getElementsByTagName("script")[0];
    t.parentNode.insertBefore(e, t);
}

function m(e, t, i, o, r) {
    if (window["_gaq"]) window["_gaq"].push([ "_trackEvent", e, t, i, o, r ]);
}

function f(e, t, i) {
    if (!e && e != 0) return "";
    for (let o = 0; o < e.length; o++) {
        if (e.charAt(o) == t) e = e.substring(0, o) + i + e.substring(o + 1, e.length);
    }
    return e;
}

function p(e, t) {
    if ((e || e == "") && t) {
        e = e.toLowerCase();
        t = t.toLowerCase();
        if (t.indexOf("http://") === 0 || t.indexOf("https://") === 0) {
            t = t.substring(t.indexOf("://") + "://".length);
            if (t.indexOf("?") !== -1) t = t.substring(0, t.indexOf("?"));
            if (t.indexOf("#") !== -1) t = t.substring(0, t.indexOf("#"));
            if (t.indexOf("www.") === 0) t = t.substring("www.".length);
            if (t.indexOf("dev.") === 0) t = t.substring("dev.".length);
            if (t.indexOf(":") !== -1) {
                if (t.indexOf("/") !== -1) t = t.substring(0, t.indexOf(":")) + t.substring(t.indexOf("/")); else t.substring(0, t.indexOf(":"));
            }
            if (t.indexOf("/") === t.length - 1) t = t.substring(0, t.length - 1);
            if (e === "" && t === "protopage.com") return true;
            if (t === "protopage.com/" + e) return true;
        }
    }
}

function g(e, t) {
    chrome.tabs.update(e["id"], {
        active: true
    }, (() => {
        chrome.windows.update(e["windowId"], {
            focused: true
        }, (() => {
            if (t) t();
        }));
    }));
}

function h(e, t) {
    chrome.tabs.query({}, (i => {
        let o = false;
        for (let r in i) {
            let n = i[r];
            let f = n["url"];
            if (f.indexOf("#") !== -1) f = f.substring(0, f.indexOf("#"));
            if (f.indexOf("?") !== -1) f = f.substring(0, f.indexOf("?"));
            if (e === f) {
                o = true;
                g(n, (() => {
                    if (t) t(n, true);
                }));
                break;
            }
        }
        if (!o) {
            chrome.tabs.create({
                url: e,
                index: 0
            }, (e => {
                if (t) t(e, false);
            }));
        }
    }));
}

function w(e, t) {
    let i = t => {
        if (!t && t !== "") return;
        chrome.tabs.query({}, (i => {
            let o = false;
            for (let r in i) {
                let n = i[r];
                if (p(t, n["url"])) {
                    o = true;
                    e(n);
                    break;
                }
            }
            if (!o) {
                let i = t !== "";
                chrome.tabs.create({
                    url: u + t,
                    pinned: false,
                    index: 0
                }, (t => {
                    e(t);
                }));
            }
        }));
    };
    if (!t && t !== "") {
        k().then((e => i(e)));
    } else {
        i(t);
    }
}

async function v() {
    let e = await new Promise(((e, t) => {
        chrome.cookies.getAll({
            domain: "protopage.com"
        }, (t => {
            e(t);
        }));
    }));
    let t, i;
    e.forEach((e => {
        if (e["name"] === "login") i = e;
        if (e["name"].startsWith("untitled-")) t = e;
    }));
    let o = new Set;
    if (i) {
        let e = i["value"];
        if (e) {
            e = f(e, '"', "");
            if (e) {
                e.split(":").forEach((e => {
                    if (e) o.add(e);
                }));
            }
        }
    }
    if (t) {
        o.add("");
    }
    return o;
}

async function k() {
    let e = undefined;
    let t = await v();
    let i = window.localStorage["protopagePathSelection"];
    if (i !== undefined && t.has(i)) {
        e = i;
    } else if (t.size > 0) {
        let i = Array.from(t);
        i.sort();
        e = i[0];
        if (e === "" && t.size > 1) {
            e = i[1];
        }
    }
    return e;
}

function b(e, t, i) {
    chrome.tabs.query({}, (o => {
        let r = false;
        for (let t in o) {
            let n = o[t];
            if (p(e, n["url"])) {
                r = true;
                i(n);
                break;
            }
        }
        if (!r) {
            chrome.tabs.create({
                url: t,
                pinned: false,
                index: 0
            }, (e => {
                i(e);
            }));
        }
    }));
}

function D(e, t, i) {
    b(e, t, (e => {
        chrome.tabs.update(e["id"], {
            url: t
        }, (() => {
            g(e, i);
        }));
    }));
}

async function I(e) {
    return new Promise(((t, i) => {
        window.chrome.windows.getAll({
            populate: !!e
        }, (e => {
            if (chrome.runtime.lastError) {
                i(chrome.runtime.lastError.message);
            } else {
                t(e);
            }
        }));
    }));
}

var y = {};

var P = {};

chrome.runtime.onMessage.addListener(((e, t, i) => {
    if (e["type"] === "invokeExtension") {
        let o = JSON.parse(e["data"]);
        let r = o["method"];
        y[r](o, t, i);
    }
    return true;
}));

chrome.tabs.onRemoved.addListener(((e, t) => {
    P[e] = false;
}));

chrome.tabs.onUpdated.addListener(((e, t, i) => {
    if (P[e]) {
        if (t["url"]) {
            if (j(t["url"]) != P[e]) {
                delete P[e];
            }
        }
    }
}));

function j(e) {
    if (!e) return e;
    if (e.indexOf("?") !== -1) e = e.substring(0, e.indexOf("?"));
    if (e.indexOf("#") !== -1) e = e.substring(0, e.indexOf("#"));
    return e;
}

y["notifyPresence"] = (e, t, i) => {
    P[t["tab"]["id"]] = t["tab"]["url"];
    i();
};

var _ = 0;

var A = {};

function E(e, t, i) {
    w((i => {
        g(i, (() => {
            _++;
            if (t) A[_] = t;
            let o = {
                req: e,
                type: "invokeProtopage",
                invokeProtopageFromExtensionRpcId: _
            };
            let r = () => {
                chrome.tabs.sendMessage(i["id"], o, undefined, (e => {}));
            };
            let n = e => {
                if (P[i["id"]]) r(); else {
                    if ((new Date).getTime() < e) {
                        setTimeout((() => {
                            n(e);
                        }), 250);
                    }
                }
            };
            n((new Date).getTime() + 1e3 * 60);
        }));
    }), i);
}

window["invokeProtopageFromExtension"] = E;

chrome.runtime.onMessage.addListener(((e, t, i) => {
    if (e["type"] === "invokeProtopageResponse") {
        if (A[e["invokeProtopageFromExtensionRpcId"]]) {
            A[e["invokeProtopageFromExtensionRpcId"]](e["resp"]);
        }
    }
    i();
}));

s();

const G = {};

window["urlFeeds"] = G;

chrome.runtime.onInstalled.addListener((e => {
    if (e["reason"] === "install") {
        m("General", "install");
        v().then((e => {
            if (e.size === 0) {
                h(u + "?ref=chrome-ext-create", ((e, t) => {}));
            } else {
                chrome.tabs.query({}, (t => {
                    e.forEach((e => {
                        for (let i of t) {
                            if (p(e, i["url"])) {
                                chrome.tabs.reload(i["id"]);
                            }
                        }
                    }));
                }));
            }
        }));
    }
    if (e["reason"] === "update") {
        m("General", "onInstalled-update");
    }
    if (e["reason"] === "chrome_update") {
        m("General", "onInstalled-chrome_update");
    }
}));

function R(e, t) {
    chrome.tabs.query({
        windowId: t
    }, (i => {
        chrome.tabs.update(i[0]["id"], {}, (() => {
            for (let i = 0; i < e.length; i++) {
                chrome.tabs.create({
                    windowId: t,
                    pinned: false,
                    active: false,
                    url: e[i]
                }, (() => {}));
            }
        }));
    }));
}

y["openAllBookmarks"] = (e, t, i) => {
    let o = e["urls"];
    if (e["openInSameWindow"]) {
        R(o, chrome.windows["WINDOW_ID_CURRENT"]);
    } else {
        chrome.windows.create({
            focused: true,
            url: o[0]
        }, (e => {
            o.splice(0, 1);
            if (o.length > 0) R(o, e["id"]);
        }));
    }
    i();
};

y["triggerImportBookmarks"] = (e, t, i) => {
    let o = e["bookmarksId"];
    let r = e["path"];
    chrome.tabs.query({}, (e => {
        let i = false;
        for (let n in e) {
            let f = e[n];
            if (p(r, f["url"])) {
                i = true;
                E({
                    method: "triggerImportBookmarks",
                    bookmarksId: o
                }, (e => {}), r);
                chrome.tabs.remove(t["tab"]["id"], (() => {}));
                break;
            }
        }
        if (!i) {
            let e = u + r + "?bookmarksId=" + o;
            chrome.tabs.create({
                url: e,
                index: 0
            }, (e => {}));
            chrome.tabs.remove(t["tab"]["id"], (() => {}));
        }
    }));
    i();
};

chrome.runtime.onMessage.addListener(((e, t, i) => {
    if (e.type === "feeds") {
        let t = e.u;
        G[e.href] = t;
    } else if (e.type === "currentPageIsFeed") {
        G[e.href] = e.href;
    } else if (e.type === "visitProtopage") {
        w((e => {
            g(e);
        }));
    }
    i();
}));

(async () => {
    await F();
})();

async function F() {
    if (e != window.localStorage["lastSeenVersion"]) {
        window.localStorage["lastSeenVersion"] = e;
    } else {
        if (window.localStorage["disablePinProtopageOnStartup"] != "true") {
            if ((await I(false)).find((e => !e["incognito"]))) {
                w((() => {}));
            } else {
                let e = false;
                window.chrome.windows.onCreated.addListener((t => {
                    if (!e) {
                        (async () => {
                            if ((await I(false)).find((e => !e["incognito"]))) {
                                e = true;
                                w((() => {}));
                            }
                        })();
                    }
                }));
            }
        }
    }
}