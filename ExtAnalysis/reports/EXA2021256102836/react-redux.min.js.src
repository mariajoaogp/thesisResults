!(function (t, e) {
    typeof exports === 'object' && typeof module !== 'undefined' ? e(exports, require('react'), require('redux')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'redux'], e) : e(t.ReactRedux = t.ReactRedux || {}, t.React, t.Redux);
}(this, (t, e, n) => {
    function r(t) {
        return function () {
            return t;
        };
    }

    function o() {
        let t; const n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 'store';
        const r = arguments[1] || `${n}Subscription`; const
            o = (function (t) {
                function o(e, r) {
                    q(this, o);
                    const i = D(this, t.call(this, e, r));
                    return i[n] = e.store, i;
                }

                return M(o, t), o.prototype.getChildContext = function () {
                    let t;
                    return t = {}, t[n] = this[n], t[r] = null, t;
                }, o.prototype.render = function () {
                    return e.Children.only(this.props.children);
                }, o;
            }(e.Component));
        return o.propTypes = {
            store: j.isRequired,
            children: R.element.isRequired
        }, o.childContextTypes = (t = {}, t[n] = j.isRequired, t[r] = x, t), o;
    }

    function i() {
        let t = []; let
            e = [];
        return {
            clear() {
                e = Y, t = Y;
            },
            notify() {
                for (let n = t = e, r = 0; n.length > r; r++) n[r]();
            },
            get() {
                return e;
            },
            subscribe(n) {
                let r = !0;
                return e === t && (e = t.slice()), e.push(n), function () {
                    r && t !== Y && (r = !1, e === t && (e = t.slice()), e.splice(e.indexOf(n), 1));
                };
            }
        };
    }

    function s() {
    }

    function u(t, e) {
        var n = {
            run(r) {
                try {
                    const o = t(e.getState(), r);
                    (o !== n.props || n.error) && (n.shouldComponentUpdate = !0, n.props = o, n.error = null);
                } catch (t) {
                    n.shouldComponentUpdate = !0, n.error = t;
                }
            }
        };
        return n;
    }

    function p(t) {
        let n; let r; const o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; const i = o.getDisplayName;
        const p = void 0 === i ? function (t) {
            return `ConnectAdvanced(${t})`;
        } : i; const a = o.methodName; const c = void 0 === a ? 'connectAdvanced' : a; const d = o.renderCountProp;
        const f = void 0 === d ? void 0 : d; const l = o.shouldHandleStateChanges; const h = void 0 === l || l; const y = o.storeKey;
        const b = void 0 === y ? 'store' : y; const v = o.withRef; const m = void 0 !== v && v;
        const P = U(o, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);
        const O = `${b}Subscription`; const g = z++; const S = (n = {}, n[b] = j, n[O] = x, n); const
            C = (r = {}, r[O] = x, r);
        return function (n) {
            V(typeof n === 'function', `You must pass a component to the function returned by connect. Instead received ${JSON.stringify(n)}`);
            const r = n.displayName || n.name || 'Component';
            const o = p(r);
            const i = {
                ...P,
                getDisplayName: p,
                methodName: c,
                renderCountProp: f,
                shouldHandleStateChanges: h,
                storeKey: b,
                withRef: m,
                displayName: o,
                wrappedComponentName: r,
                WrappedComponent: n
            };
            const a = (function (r) {
                function p(t, e) {
                    q(this, p);
                    const n = D(this, r.call(this, t, e));
                    return n.version = g, n.state = {}, n.renderCount = 0, n.store = t[b] || e[b], n.propsMode = !!t[b], n.setWrappedInstance = n.setWrappedInstance.bind(n), V(n.store, `Could not find "${b}" in either the context or props of "${o}". Either wrap the root component in a <Provider>, or explicitly pass "${b}" as a prop to "${o}".`), n.initSelector(), n.initSubscription(), n;
                }

                return M(p, r), p.prototype.getChildContext = function () {
                    let t; const
                        e = this.propsMode ? null : this.subscription;
                    return t = {}, t[O] = e || this.context[O], t;
                }, p.prototype.componentDidMount = function () {
                    h && (this.subscription.trySubscribe(), this.selector.run(this.props), this.selector.shouldComponentUpdate && this.forceUpdate());
                }, p.prototype.componentWillReceiveProps = function (t) {
                    this.selector.run(t);
                }, p.prototype.shouldComponentUpdate = function () {
                    return this.selector.shouldComponentUpdate;
                }, p.prototype.componentWillUnmount = function () {
                    this.subscription && this.subscription.tryUnsubscribe(), this.subscription = null, this.notifyNestedSubs = s, this.store = null, this.selector.run = s, this.selector.shouldComponentUpdate = !1;
                }, p.prototype.getWrappedInstance = function () {
                    return V(m, `To access the wrapped instance, you need to specify { withRef: true } in the options argument of the ${c}() call.`), this.wrappedInstance;
                }, p.prototype.setWrappedInstance = function (t) {
                    this.wrappedInstance = t;
                }, p.prototype.initSelector = function () {
                    const e = t(this.store.dispatch, i);
                    (this.selector = u(e, this.store)).run(this.props);
                }, p.prototype.initSubscription = function () {
                    if (h) {
                        const t = (this.propsMode ? this.props : this.context)[O];
                        this.subscription = new J(this.store, t, this.onStateChange.bind(this)), this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
                    }
                }, p.prototype.onStateChange = function () {
                    this.selector.run(this.props), this.selector.shouldComponentUpdate ? (this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate, this.setState(G)) : this.notifyNestedSubs();
                }, p.prototype.notifyNestedSubsOnComponentDidUpdate = function () {
                    this.componentDidUpdate = void 0, this.notifyNestedSubs();
                }, p.prototype.isSubscribed = function () {
                    return !!this.subscription && this.subscription.isSubscribed();
                }, p.prototype.addExtraProps = function (t) {
                    if (!(m || f || this.propsMode && this.subscription)) return t;
                    const e = { ...t };
                    return m && (e.ref = this.setWrappedInstance), f && (e[f] = this.renderCount++), this.propsMode && this.subscription && (e[O] = this.subscription), e;
                }, p.prototype.render = function () {
                    const t = this.selector;
                    if (t.shouldComponentUpdate = !1, t.error) throw t.error;
                    return e.createElement(n, this.addExtraProps(t.props));
                }, p;
            }(e.Component));
            return a.WrappedComponent = n, a.displayName = o, a.childContextTypes = C, a.contextTypes = S, a.propTypes = S, L(a, n);
        };
    }

    function a(t, e) {
        return t === e ? t !== 0 || e !== 0 || 1 / t == 1 / e : t !== t && e !== e;
    }

    function c(t, e) {
        if (a(t, e)) return !0;
        if (typeof t !== 'object' || t === null || typeof e !== 'object' || e === null) return !1;
        const n = Object.keys(t); const
            r = Object.keys(e);
        if (n.length !== r.length) return !1;
        for (let o = 0; n.length > o; o++) if (!Q.call(e, n[o]) || !a(t[n[o]], e[n[o]])) return !1;
        return !0;
    }

    function d(t) {
        return function (e, n) {
            function r() {
                return o;
            }

            var o = t(e, n);
            return r.dependsOnOwnProps = !1, r;
        };
    }

    function f(t) {
        return t.dependsOnOwnProps !== null && void 0 !== t.dependsOnOwnProps ? !!t.dependsOnOwnProps : t.length !== 1;
    }

    function l(t, e) {
        return function (e, n) {
            var r = function (t, e) {
                return r.dependsOnOwnProps ? r.mapToProps(t, e) : r.mapToProps(t);
            };
            return r.dependsOnOwnProps = !0, r.mapToProps = function (e, n) {
                r.mapToProps = t, r.dependsOnOwnProps = f(t);
                let o = r(e, n);
                return typeof o === 'function' && (r.mapToProps = o, r.dependsOnOwnProps = f(o), o = r(e, n)), o;
            }, r;
        };
    }

    function h(t, e, n) {
        return { ...n, ...t, ...e };
    }

    function y(t) {
        return function (e, n) {
            const r = n.pure; const o = n.areMergedPropsEqual; let i = !1; let
                s = void 0;
            return function (e, n, u) {
                const p = t(e, n, u);
                return i ? r && o(p, s) || (s = p) : (i = !0, s = p), s;
            };
        };
    }

    function b(t, e, n, r) {
        return function (o, i) {
            return n(t(o, i), e(r, i), i);
        };
    }

    function v(t, e, n, r, o) {
        function i(o, i) {
            return h = o, y = i, b = t(h, y), v = e(r, y), m = n(b, v, y), l = !0, m;
        }

        function s() {
            return b = t(h, y), e.dependsOnOwnProps && (v = e(r, y)), m = n(b, v, y);
        }

        function u() {
            return t.dependsOnOwnProps && (b = t(h, y)), e.dependsOnOwnProps && (v = e(r, y)), m = n(b, v, y);
        }

        function p() {
            const e = t(h, y); const
                r = !f(e, b);
            return b = e, r && (m = n(b, v, y)), m;
        }

        function a(t, e) {
            const n = !d(e, y); const
                r = !c(t, h);
            return h = t, y = e, n && r ? s() : n ? u() : r ? p() : m;
        }

        var c = o.areStatesEqual; var d = o.areOwnPropsEqual; var f = o.areStatePropsEqual; var l = !1; var h = void 0; var y = void 0;
        var b = void 0; var v = void 0; var
            m = void 0;
        return function (t, e) {
            return l ? a(t, e) : i(t, e);
        };
    }

    function m(t, e) {
        const n = e.initMapStateToProps; const r = e.initMapDispatchToProps; const o = e.initMergeProps;
        const i = U(e, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']); const s = n(t, i); const u = r(t, i);
        const p = o(t, i);
        return (i.pure ? v : b)(s, u, p, t, i);
    }

    function P(t, e, n) {
        for (let r = e.length - 1; r >= 0; r--) {
            const o = e[r](t);
            if (o) return o;
        }
        return function (e, r) {
            throw Error(`Invalid value of type ${typeof t} for ${n} argument when connecting component ${r.wrappedComponentName}.`);
        };
    }

    function O(t, e) {
        return t === e;
    }

    const g = function () {
    };
    g.thatReturns = r, g.thatReturnsFalse = r(!1), g.thatReturnsTrue = r(!0), g.thatReturnsNull = r(null), g.thatReturnsThis = function () {
        return this;
    }, g.thatReturnsArgument = function (t) {
        return t;
    };
    const S = g; const C = function (t) {
    }; const w = function (t, e, n, r, o, i, s, u) {
        if (C(e), !t) {
            let p;
            if (void 0 === e) p = Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'); else {
                const a = [n, r, o, i, s, u]; let
                    c = 0;
                (p = Error(e.replace(/%s/g, () => a[c++]))).name = 'Invariant Violation';
            }
            throw p.framesToPop = 1, p;
        }
    }; const T = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'; const E = function () {
        function t(t, e, n, r, o, i) {
            i !== T && w(!1, 'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types');
        }

        function e() {
            return t;
        }

        t.isRequired = t;
        const n = {
            array: t,
            bool: t,
            func: t,
            number: t,
            object: t,
            string: t,
            symbol: t,
            any: t,
            arrayOf: e,
            element: t,
            instanceOf: e,
            node: t,
            objectOf: e,
            oneOf: e,
            oneOfType: e,
            shape: e
        };
        return n.checkPropTypes = S, n.PropTypes = n, n;
    }; var R = (function (t, e) {
        return e = { exports: {} }, t(e, e.exports), e.exports;
    }((t) => {
        t.exports = E();
    })); var x = R.shape({
        trySubscribe: R.func.isRequired,
        tryUnsubscribe: R.func.isRequired,
        notifyNestedSubs: R.func.isRequired,
        isSubscribed: R.func.isRequired
    }); var j = R.shape({ subscribe: R.func.isRequired, dispatch: R.func.isRequired, getState: R.func.isRequired });
    var q = function (t, e) {
        if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
    }; const N = Object.assign || function (t) {
        for (let e = 1; arguments.length > e; e++) {
            const n = arguments[e];
            for (const r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
        }
        return t;
    }; var M = function (t, e) {
        if (typeof e !== 'function' && e !== null) throw new TypeError(`Super expression must either be null or a function, not ${typeof e}`);
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
    }; var U = function (t, e) {
        const n = {};
        for (const r in t) e.indexOf(r) < 0 && Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
        return n;
    }; var D = function (t, e) {
        if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !e || typeof e !== 'object' && typeof e !== 'function' ? t : e;
    }; const I = o(); const _ = {
        childContextTypes: !0,
        contextTypes: !0,
        defaultProps: !0,
        displayName: !0,
        getDefaultProps: !0,
        mixins: !0,
        propTypes: !0,
        type: !0
    }; const W = {
        name: !0, length: !0, prototype: !0, caller: !0, callee: !0, arguments: !0, arity: !0
    };
    const F = Object.getOwnPropertySymbols; const k = Object.prototype.propertyIsEnumerable; const A = Object.getPrototypeOf;
    const H = A && A(Object); const K = Object.getOwnPropertyNames; var L = function t(e, n, r) {
        if (typeof n !== 'string') {
            if (H) {
                const o = A(n);
                o && o !== H && t(e, o, r);
            }
            let i = K(n);
            F && (i = i.concat(F(n)));
            for (let s = 0; i.length > s; ++s) {
                const u = i[s];
                if (!(_[u] || W[u] || r && r[u]) && (k.call(n, u) || typeof n[u] === 'function')) {
                    try {
                        e[u] = n[u];
                    } catch (t) {
                    }
                }
            }
            return e;
        }
        return e;
    }; var V = function (t, e, n, r, o, i, s, u) {
        if (!t) {
            let p;
            if (void 0 === e) p = Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'); else {
                const a = [n, r, o, i, s, u]; let
                    c = 0;
                (p = Error(e.replace(/%s/g, () => a[c++]))).name = 'Invariant Violation';
            }
            throw p.framesToPop = 1, p;
        }
    }; var Y = null; const B = {
        notify() {
        }
    }; var J = (function () {
        function t(e, n, r) {
            q(this, t), this.store = e, this.parentSub = n, this.onStateChange = r, this.unsubscribe = null, this.listeners = B;
        }

        return t.prototype.addNestedSub = function (t) {
            return this.trySubscribe(), this.listeners.subscribe(t);
        }, t.prototype.notifyNestedSubs = function () {
            this.listeners.notify();
        }, t.prototype.isSubscribed = function () {
            return !!this.unsubscribe;
        }, t.prototype.trySubscribe = function () {
            this.unsubscribe || (this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange), this.listeners = i());
        }, t.prototype.tryUnsubscribe = function () {
            this.unsubscribe && (this.unsubscribe(), this.unsubscribe = null, this.listeners.clear(), this.listeners = B);
        }, t;
    }()); var z = 0; var G = {}; var Q = Object.prototype.hasOwnProperty;
    const X = typeof global === 'object' && global && global.Object === Object && global;
    const Z = typeof self === 'object' && self && self.Object === Object && self;
    const $ = (X || Z || Function('return this')(), Function.prototype.toString.call(Object), [function (t) {
        return typeof t === 'function' ? l(t, 'mapDispatchToProps') : void 0;
    }, function (t) {
        return t ? void 0 : d((t) => ({ dispatch: t }));
    }, function (t) {
        return t && typeof t === 'object' ? d((e) => n.bindActionCreators(t, e)) : void 0;
    }]); const tt = [function (t) {
        return typeof t === 'function' ? l(t, 'mapStateToProps') : void 0;
    }, function (t) {
        return t ? void 0 : d(() => ({}));
    }]; const et = [function (t) {
        return typeof t === 'function' ? y(t) : void 0;
    }, function (t) {
        return t ? void 0 : function () {
            return h;
        };
    }]; const
        nt = (function () {
            const t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; const e = t.connectHOC;
            const n = void 0 === e ? p : e; const r = t.mapStateToPropsFactories; const o = void 0 === r ? tt : r;
            const i = t.mapDispatchToPropsFactories; const s = void 0 === i ? $ : i; const u = t.mergePropsFactories;
            const a = void 0 === u ? et : u; const d = t.selectorFactory; const
                f = void 0 === d ? m : d;
            return function (t, e, r) {
                const i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}; const u = i.pure;
                const p = void 0 === u || u; const d = i.areStatesEqual; const l = void 0 === d ? O : d; const h = i.areOwnPropsEqual;
                const y = void 0 === h ? c : h; const b = i.areStatePropsEqual; const v = void 0 === b ? c : b; const m = i.areMergedPropsEqual;
                const g = void 0 === m ? c : m;
                const S = U(i, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);
                const C = P(t, o, 'mapStateToProps'); const w = P(e, s, 'mapDispatchToProps'); const
                    T = P(r, a, 'mergeProps');
                return n(f, {
                    methodName: 'connect',
                    getDisplayName(t) {
                        return `Connect(${t})`;
                    },
                    shouldHandleStateChanges: !!t,
                    initMapStateToProps: C,
                    initMapDispatchToProps: w,
                    initMergeProps: T,
                    pure: p,
                    areStatesEqual: l,
                    areOwnPropsEqual: y,
                    areStatePropsEqual: v,
                    areMergedPropsEqual: g,
                    ...S
                });
            };
        }());
    t.Provider = I, t.createProvider = o, t.connectAdvanced = p, t.connect = nt, Object.defineProperty(t, '__esModule', { value: !0 });
}));
