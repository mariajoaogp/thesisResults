var app = (function () {

  var exports = {};

  var robotsByTabId = {};
  var defaultSettings = {
    highlightNoFollow: false,
    useRelCan: true,
    relcanManuallySet: false,
    stripTrackingParams: true
  };
  var settings = {};

  var ChromePlatformAnalytics = {
    init: function(){},
    sendAppView: function(){},
    sendEvent: function(){},
    toggle: function(){}
  };

  var vendor = (navigator.userAgent.match(/(Chrome|Firefox)/) || [])[1];
  var analyticsProp = 'power-trust';


  var init = function() {
    if (vendor === 'Chrome') {
      ChromePlatformAnalytics = window.ChromePlatformAnalytics;
      ChromePlatformAnalytics.init(analyticsProp, 'UA-1922227-37');
    }
    if (typeof chrome.runtime.onInstalled !== 'undefined') {
      chrome.runtime.onInstalled.addListener(onInstallUpdateHandler);
    }
    else {
      if (!localStorage.installTS) {
        localStorage.installTS = Date.now();
        onInstallUpdateHandler({reason: 'install'});
      }
    }
    chrome.runtime.setUninstallURL('http://www.linkresearchtools.com/thanks/lrt-power-trust-extension-uninstall/');
    initSettings();
    localStorage.termsAccepted = true;
    initWebRequestsObserver();
    Language.init(function(lang){
      LRT.init( Conf.apiUrl );
      LRT.setLang( lang );
      // disable user registration requirement
      if (!localStorage.apiKey) {
        localStorage.apiKey = '6cceac8ca59a50bf06f22de283860b8a58d';
      }

      Metrics.init({
        status: new Helpers.Status(),
        $root: [],
        lang: lang
      });
      initMessaging();
      initTabsEvents();
      processAllTabs();
    });
  };


  var initSettings = function(cbContinue){
    chrome.storage.local.get('settings', function(data){
      if (data.settings) settings = data.settings;
      for (var key in defaultSettings) {
        if (typeof settings[key] === 'undefined') {
          settings[key] = defaultSettings[key];
        }
      }
      if (cbContinue) cbContinue();
    });
  };


  var initMessaging = function(){
    chrome.runtime.onMessage.addListener(
      function(request, sender, sendResponse) {
        var cmd = request.cmd;
        var tabId = sender.tab ? sender.tab.id : '';
        var data = request.data;
        if (cmd === 'processAllTabs') {
          Language.init();
          processAllTabs();
        }
        else if (cmd === 'settings.get') {
          sendResponse(settings);
        }
        else if (cmd === 'settings.set') {
          if (settings[data.key] !== data.value) {
            ChromePlatformAnalytics.sendEvent([analyticsProp, 'option changed', data.key + '=' + data.value]);
          }
          settings[ data.key ] = data.value;
          chrome.storage.local.set({settings: settings});
        }
        else if (cmd === 'page_data.get') {
          sendResponse(robotsByTabId[tabId]);
        }
        else if (cmd === 'tab.remove') {
          chrome.tabs.remove(tabId);
        }
        else if (cmd === 'track_event') {
          sendEvent(data);
        }
      });
  };


  var initTabsEvents = function(){
    chrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {
      if (vendor === 'Firefox' && tab.incognito) return;
      if (changeInfo.status == 'loading') {
        var url = tab.url;
        if (!url.match(/^https?/)) return;
        processUrl(tab.id, url);
      }
      if (changeInfo.status == 'complete') {
        chrome.tabs.executeScript(tab.id, {file: "/js/cs-page.js"});
      }
    });
    if (typeof chrome.tabs.onReplaced !== 'undefined') {
      chrome.tabs.onReplaced.addListener(function(addedTabId, removedTabId){
        chrome.tabs.get( addedTabId, function(tab){
          var url = tab.url;
          if (!url.match(/^https?/)) return;
          processUrl(tab.id, url);
        });
      });
    }
  };


  var sendEvent = function(action){
    ChromePlatformAnalytics.sendEvent([analyticsProp, action, vendor]);
  };


  var onInstallUpdateHandler = function(details){
    if (details.reason === 'install') {
      chrome.tabs.create({url: Conf.welcomeUrl});
      sendEvent('install');
    }
    else if (details.reason === 'update') {
    }
  };


  var processAllTabs = function(){
    chrome.tabs.query({}, function(tabs){
      for (var i = 0, len = tabs.length; i < len; i++) {
        var tab = tabs[i];
        if (!tab.url.match(/^https?/)) continue;
        if (vendor === 'Firefox' && tab.incognito) return;
        chrome.tabs.executeScript(tab.id, {file: "/js/cs-page.js"});
        processUrl( tab.id, tab.url);
      }
    });
  };


  var processUrl = function(tabId, url){
    url = Url.preprocessUrl( url );
    if (settings.stripTrackingParams) {
      url = Url.stripTrackingParams(url);
    }
    if (!localStorage.apiKey || !localStorage.termsAccepted) return;
    LRT.setKey( localStorage.apiKey );
    var promise = Promise.resolve(url);
    if (localStorage.defaultMetric === 'page') {
      promise = Metrics.getRelCan(tabId);
    }
    promise.then(function(relCanURL){
      if (!relCanURL) {
        relCanURL = url;
      }
      Metrics.get(
        relCanURL,
        function( data ){
          var imageData = LRTIcon.getImageData( data.metrics, data.messageCode);
          Icon.setTab(tabId, {
            imageData: imageData,
            title: LRTIcon.getTitle( data.metrics, 'icon')
          });
        },
        function( errorThrown, xhr ){
          ChromePlatformAnalytics.sendEvent(['api', 'error', 'metrics: ' + errorThrown]);
          // page count is zero:
          if (xhr && xhr.status === 602) {
            var imageData = LRTIcon.getImageData( {}, xhr.status);
            Icon.setTab(tabId, {
              imageData: imageData,
              title: ''
            });
          }
        });
    });
  };


  var initWebRequestsObserver = function(){
    var opts = ["responseHeaders"];
    var filter = {urls: ["<all_urls>"]};
    var cbProcessDetails = function(details){
      if (details.type !== 'main_frame') return;
      if (details.tabId < 0) return;
      processHeaders(details.tabId, details.responseHeaders);
    };
    chrome.webRequest.onCompleted.addListener(cbProcessDetails,filter,opts);
    chrome.webRequest.onBeforeSendHeaders.addListener(
      function(details) {
        var resHeaders = [];
        for (var i = 0; i < details.requestHeaders.length; ++i) {
          if (details.requestHeaders[i].name !== 'Cookie') {
            resHeaders.push(details.requestHeaders[i]);
          }
        }
        return {requestHeaders: resHeaders};
      },
      {urls: ["https://plugin.linkresearchtools.com/api/*"]},
      ["blocking", "requestHeaders"]);
  };


  var processHeaders = function(tabId, headers){
    var robots = [];
    headers.map(function(header){
      var name = header.name.toLowerCase();
      var value = header.value;
      checkRobotsHeader(name, value, robots);
    });
    robotsByTabId[tabId] = robots;
  };


  var checkRobotsHeader = function(name, value, res){
    if (!name.match(/^x-robots/)) return;
    value = value.toLowerCase();
    if (!value.match(/(noindex|nofollow|noarchive)/)) return;
    var item = {src: 'header'};
    var bot = (value.match(/^([\w. -]+):/) || [])[1];
    if (bot) item.bot = bot;
    item.noindex = value.indexOf('noindex') !== -1;
    item.nofollow = value.indexOf('nofollow') !== -1;
    item.noarchive = value.indexOf('noarchive') !== -1;
    item.rawValue = value;
    res.push(item);
  };


  /**
   * Public
   */
  exports.init = init;
  return exports;

})();


app.init();
