/**
 * I don't use chrome.i18n service because extension has to support language
 * switching. I cann't achieve this with native chrome locales.
 * I've written my own class that very close to the chrome.i18n API.
 * Same calls, same file structures (but "locales" instead of "_locales" dir).
 */

var i18n = (function(){

  var _langNames = {
    en: 'English',
    de: 'German'
  };
  var _langs = Object.keys(_langNames);
  var _default_lang = 'en';
  var _lang = _default_lang;

  var messages = {};


  var init = function( lang, cbContinue ){
    if (lang && _langNames[lang]) {
      _lang = lang;
      loadMessages(lang, cbContinue);
    }
    else {
      loadMessages(_default_lang, cbContinue);
    }
  };


  var loadMessages = function( lang, cbProcessResult ){
    var path = chrome.extension.getURL('locales/' + lang + '/messages.json');
    $.getJSON(path)
      .done(function(response){
        messages = response;
        if (typeof cbProcessResult === 'function') cbProcessResult(lang);
      })
      .fail(function(){
        loadMessages( _default_lang, cbProcessResult);
      });
  };


  var getMessage = function( key ){
    if (messages && messages[key]) return messages[key].message;
    else return '';
  };


  var setLang = function( lang ){
    if (!$.inArray(lang, _langs)) return;
    _lang = lang;
    localStorage.lang = lang;
    loadMessages(lang);
  };


  var getLang = function(){
    return _lang;
  };

  /**
   * Returs list of predefined languages
   * @return {array} _langs
   */
  var getLangs = function(){
    var res = [];
    $.each(_langNames, function(key, val){
      res.push({
        short: key,
        full: val
      });
    });
    return res;
  };


  return {
    init: init,
    getLang: getLang,
    setLang: setLang,
    getMessage: getMessage,
    getLangs: getLangs
  };


})();



//var _ = chrome.i18n.getMessage.bind(chrome);
var _ = i18n.getMessage.bind(i18n);
