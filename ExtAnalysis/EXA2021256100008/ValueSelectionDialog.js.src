(function ($) {

    $.Class('infa.eicDialog', {
        defaultOptions: {
            /**
             * DOM Object where the dialog has to be rendered.
             * @type {String}
             */
            dialogCntr: 'body',

            dCls: '',

            /**
             * InfaDialog configuration.
             * @type {Object}
             */
            dOptions: {
                width: 400,
                height: 400
            },

            okLabel: "Ok",

            cancelLabel: "Cancel",

            okClick: function () {},

            cancelClick: function () {},

            /**
             * Array of section object to added to the dialog
             * @type {Array}
             */
            dContent: []

            /**
            	----------------------------------------------------
            	Section Object :-
            		{
            			sectionCls : "", CSS Class for section.
            			item:[] List of widget object within the section.
            		}
            	----------------------------------------------------
            	Widget Object :-
            		{
            			wType: 'plainHTML', Widget types like infaGrid, infaChart.
            			wId: '_html1', Id for the widget within dialog.
            			wCls: 'dSectionWidget', CSS class fo the widget container
            			wOptions: {} Infa widget configuration.
            		}
            	----------------------------------------------------
            	plainHTML wiget configuration :-
            		{
            			wType: 'plainHTML',
            			wId: '_html1',
            			wCls: 'dSectionWidget',
            			wOptions: {
            				content: "<h1>Header</h1>"
            			}
            		}

            	----------------------------------------------------
            	Example for multi section :-

            		dContent: [{
            			sectionCls: "dSection",
            			items: [{
            				wType: 'plainHTML',
            				wId: '_html1',
            				wCls: 'dSectionWidget',
            				wOptions: {
            					content: "<h1>Header</h1>"
            				}
            			},{
            				wType: 'plainHTML',
            				wId: '_html2',
            				wCls: 'dSectionWidget',
            				wOptions: {
            					content: "<p> this is another HTML CONTENT</p>"
            				}
            			}]
            		},{
            			sectionCls: "dSection2",
            			items: [{
            				wType: 'infaButton',
            				wId: '_html2',
            				wCls: 'dSectionWidget',
            				wOptions: {
            					label: "hello Button"
            				}
            			}]
            		}]
            		----------------------------------------------------
            */

        },

        init: function (overriddenOptions) {
            this.id = $.htmlId("ldmDialog");
            this._widgetMap = {};

            this._sectionMap = {};

            var opts = $.extend(true, {}, this.defaultOptions, overriddenOptions),
                self = this;
            var dialogDiv = $("<div>")
                .addClass("infaLDMDialog " + opts.dCls)
                .appendTo(opts.dialogCntr);

            opts.dOptions.buttons = {
                Ok: {
                    text: opts.okLabel,
                    id: this.id + '_ok',
                    click: function () {
                        var resp = opts.okClick.call(opts, self);
                        if (resp !== false)
                            self.close();
                    }
                },
                Cancel: {
                    text: opts.cancelLabel,
                    id: this.id + '_cancel',
                    click: function () {
                        var resp = opts.cancelClick.call(opts, self);
                        if (resp !== false)
                            self.close();
                    }
                }
            };
            dialogDiv.infaDialog(opts.dOptions);
            this._dialog = $.getWidget(dialogDiv, 'infaDialog');
            this._okBtn = this._dialog.getButton(this.id + '_ok');
            this._cancelBtn = this._dialog.getButton(this.id + '_cancel');
            this._createDialogContent(dialogDiv, opts.dContent);
        },

        getOkButton: function () {
            return this._okBtn;
        },

        getCancelButton: function () {
            return this._cancelBtn;
        },

        _createDialogContent: function (container, sections) {
            var self = this;
            $.each(sections, function (index, section) {
                var sectionDiv = $("<div>")
                    .addClass(section.sectionCls ? section.sectionCls : "dSection")
                    .appendTo(container);
                var sectionId = 'dSection' + index;
                self._sectionMap[sectionId] = {
                    count: section.items.length,
                    sectionDiv: sectionDiv
                };
                self._createWidgets(section.items, sectionDiv, sectionId);
            });
        },

        _createWidgets: function (widgets, sectionCntr, sectionId) {
            var self = this;
            $.each(widgets, function (index, widget) {
                var widgetType = widget.wType,
                    widgetOpts = widget.wOptions,
                    _widget = null,
                    widgetDiv = $("<div>")
                    .addClass(widget.wCls ? widget.wCls : "dSectionWidget")
                    .appendTo(sectionCntr);

                if (widget.id) {
                    widgetDiv.prop('id', widget.id);
                }

                if (widgetType == "plainHTML") {
                    widgetDiv.append(widgetOpts.content);
                    _widget = {
                        widgetCntr: widgetDiv,
                        widget: null
                    };
                } else {
                    widgetDiv[widgetType](widgetOpts);
                    _widget = {
                        widgetCntr: widgetDiv,
                        widget: $.getWidget(widgetDiv, widgetType)
                    };
                }
                _widget.sectionId = sectionId;
                self._widgetMap[widget.wId ? widget.wId : $.htmlId("dSectionWidget")] = _widget;
            });
        },

        /**
         * Method used to get widget within a dialog using widgetID.
         * @param  {String} wId [wId ID of the widget]
         */
        getWidget: function (wId) {
            var widgetObj = this._widgetMap[wId],
                widget = null;
            if (widgetObj) {
                widget = widgetObj.widget !== null ? widgetObj.widget : widgetObj.widgetCntr;
            }
            return widget;
        },

        /**
         * Method is used to get the widget container.
         * @param  {String} wId [wId ID of the widget]
         */
        getWidgetHolder: function (wId) {
            var widgetObj = this._widgetMap[wId];
            return widgetObj.widgetCntr;
        },

        /**
         * Method used to destroy widget within the dialog.
         * @param  {String} wId [ID of the widget].
         */
        destroyWidget: function (wId) {
            var widgetObj = this._widgetMap[wId];
            if (widgetObj) {
                if (widgetObj.widget !== null) {
                    widgetObj.widget.destroy();
                }
                widgetObj.widgetCntr.remove();
                var section = this._sectionMap[widgetObj.sectionId];
                if (--section.count === 0) {
                    section.sectionDiv.remove();
                    delete this._sectionMap[widgetObj.sectionId];
                }
                delete this._widgetMap[wId];
            }
        },

        /**
         * [getDialogWidget description]
         * @param  {String} wId [ID of the widget]
         * @return {Object}     [Dialog widget]
         */
        getDialogWidget: function (wId) {
            return this._dialog;
        },

        /**
         * Method used to open the dialog.
         */
        open: function () {
            this._dialog.open();
        },

        /**
         * Method used to close dialog.
         */
        close: function () {
            this._dialog.close();
        },

        /**
         * Method used to destroy LDM dialog.
         */
        destroy: function () {
            //Destroying all widgets configured within dialog.
            for (var wId in this._widgetMap) {
                this.destroyWidget(wId);
            }
            this._dialog.destroy();
            this._dialog.element.remove();
        }
    });

})(jQuery);