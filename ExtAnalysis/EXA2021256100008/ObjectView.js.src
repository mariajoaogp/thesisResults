$.Class('infaw.ldm.threeSixty.objectView', {
    TAB_ID_ATTR: "360_TAB_ID"
}, {

    init: function (config) {

        this._config = config;
        this._viewContr = $("#" + config.renderTo);
        this._activeTab = null;
        this._isFirstTabRendered = false;

        var self = this,
            configType = "360ViewConfiguration";

        infaw.ldm.appConfigLoader
            .getInstance()
            .getConfiguration(configType)
            .done(function (config) {
                self._createHeader(config.headerConfig);
                self._createTabs(config.tabConfig);
            });


        config.workspace.getEventManager();

        xxx = this;
    },

    _refreshObject: function () {
        return this._config.workspace._refreshObject();
    },

    _createTabs: function (tabConfigMap) {
        var self = this;
        this._tabDetails = {},
        this._hiddenTabs = {};

        //Render Tabs
        var $tabs = $('<div></div>').on({
            "onRemove": function (evt, ui) {
                var tabId = $(ui.tab).data(infaw.ldm.threeSixty.objectView.TAB_ID_ATTR);
                if (tabId) {
                    var tabInstance = self.getTabInstance(tabId);
                    if (tabInstance) {
                        self._triggerTabEvent("onClose", tabId);
                        delete self._tabDetails[tabId];
                    }
                }
            },
            "onSelect": function (evt, ui) {
                if (evt.target === this) {
                    var tabId = $(ui.tab).data(infaw.ldm.threeSixty.objectView.TAB_ID_ATTR);
                    if (tabId)
                        self.selectTab(tabId);
                }
            }
        })
        .css("height", "calc(100% - "+Math.ceil(this._headerInstance.getCntr().outerHeight()) +"px)")
        .appendTo(this._viewContr).infaTabs({
            padding: false
        })
        .css({
            padding: 0
        });
        
        this._infaTabs = $.getWidget($tabs, 'infaTabs');
        this._tabsEl = $tabs;
        this._tabsNav = $tabs.children('.ui-tabs-nav').css('width', 'calc(100% - 20px)');

        var tabIdsWithPosition = [];
        for (var tabName in tabConfigMap) {
            var tabDetails = tabConfigMap[tabName];
            try {
                this._initializeTab(tabDetails);
                tabIdsWithPosition.push({
                    position: tabDetails.position,
                    id: tabDetails.id
                });

            } catch (error) {
                console.error(error);
            }
        }

        tabIdsWithPosition.sort(function (a, b) {
            return a.position - b.position;
        });

        $.each(tabIdsWithPosition, function (i, tab) {
            if(!self.isHiddenTab(tab.id))
                self._addTab(tab.id);
        });

        this.selectTab(this._config.whereFrom);
    },

    onTabSelect: function (tabId) {

        if (this._activeTab !== tabId) {
            var objectInfo = this._config.objectInfo;
            this._showTabContent(tabId);
            this._config.workspace
                .getEventManager().sendEvent('onViewChange', [objectInfo.getId(), tabId]);

            infaw.page.PageManager.instance()
                .getEventManager().sendEvent('showExportOptions', {
                    "objectId": objectInfo.getId(),
                    "viewId": tabId
                });
            
            if(this._activeTab !== null)
                this._triggerTabEvent("onLeave", this._activeTab);

            this._activeTab = tabId;
        }
        this._triggerTabEvent("onActive", tabId);
    },

    selectTab: function (tabId) {
        var self = this,
            tabInstance = this.getTabInstance(tabId);

        if (tabInstance) {
            $.blockElem(this._config.renderTo);
            tabInstance._isReady().then(function (isVisible) {
                $.unblockElem(self._config.renderTo);
                self._infaTabs.select(tabInstance.getTabEl());
                self.onTabSelect(tabId);
            });
        }else {
            if(this.isHiddenTab(tabId)){
                this.showTab(tabId);
            }
        }
    },

    getTabInstance: function (tabId) {
        return this._tabDetails[tabId];
    },

    _addTab: function (tabId) {
        var self = this,
            tabInstance = this.getTabInstance(tabId);

        if (!tabInstance.isContentRendered()) {
            var tab = self._infaTabs.add(tabInstance.getLabel(), tabInstance.getIcon(), tabInstance.isCloseable(), tabInstance.getIndex()),
                tabHeader = self._infaTabs.getTabHeader(tab);
            tabHeader.hide();
            tabInstance._isVisible().then(function (isVisible) {

                $(tab).data(infaw.ldm.threeSixty.objectView.TAB_ID_ATTR, tabId);
                tabInstance._setTabContentCntr(tab);

                if (isVisible === true) {
                    tabHeader.show();
                } else {
                    self.removeTab(tabId);
                }
            });
        }
    },

    _createHeader: function (headerConfig) {

        var jsClass = $.toFunction(headerConfig.jsClass);
        if (jsClass) {
            this._headerInstance = new jsClass({
                renderCntr: this._viewContr,
                objectInfo: this._config.objectInfo
            });
        } else {
            console.error("360ViewConfiguration:: Invalid jsClass '" + headerConfig.jsClass + "' configured for header");
        }

    },

    _showTabContent: function (tabId) {
        var self = this,
            tabInstance = this.getTabInstance(tabId),
            tabContentOffset = Math.ceil(this._tabsNav.outerHeight());
        tabInstance._setTabContent(tabContentOffset);
    },

    _initializeTab: function (tabDetails) {
        var defaultTabConfig = {
                canRefresh: false,
                canClose: false,
                objectView: this,
                index: tabDetails.position ? tabDetails.position : 0
            },
            jsClass = $.toFunction(tabDetails.jsClass);

        if (jsClass) {
            if (!tabDetails.tabConfig) {
                tabDetails.tabConfig = {};
            }
            if (tabDetails.hidden !== true) {
                if (!this._isTabInitialized(tabDetails)) {
                    var config = $.extend(defaultTabConfig, tabDetails.tabConfig);
                    config.objectInfo = this._config.objectInfo;

                    this._tabDetails[tabDetails.id] = new jsClass(config);
                } else {
                    throw "360ViewConfiguration:: Tab ID '" + tabDetails.id + "' already exists.";
                }
            }else {
                this._hiddenTabs[tabDetails.id] = tabDetails;
            }
        } else {
            throw "360ViewConfiguration:: Invalid jsClass '" + tabDetails.jsClass + "' configured for " + tabDetails.id;
        }
    },

    _isTabInitialized: function (tabDetails) {
        return !$.isEmptyObject(this._tabDetails[tabDetails.id]);
    },

    addTab: function (tabDetails) {
        this._initializeTab(tabDetails);
        this._addTab(tabDetails.id);
    },

    isHiddenTab: function(tabId) {
        return this._hiddenTabs[tabId] ? true : false;
    },

    showTab: function(tabId) {
        var tabDetails = this._hiddenTabs[tabId];
        if(tabDetails) {
            if (!this._isTabInitialized(tabDetails)) {
                this.addTab($.extend({}, tabDetails, { hidden: false}));
            }
            this.selectTab(tabId);
        }else {
            console.error("Tab '"+tabId+"' doesnot exist.");
        }
            
    },

    removeTab: function (tabId) {
        var tabInstance = this.getTabInstance(tabId);
        if (tabInstance) {
            var _infaTab = tabInstance.getTabEl();
            this._infaTabs.remove(_infaTab);
        }
    },

    refresh: function(res) {
        if(res) {
            this._config.objectInfo.setResponse(res);
        }
        for(var tabId in this._tabDetails) {
            this._tabDetails[tabId]._setDirty(true);
        }
        this.refreshTab();
        this._headerInstance.refresh();
    },

    _triggerTabEvent: function(eventType, tabId, timeout) {
        var tabInstance = this.getTabInstance(tabId ? tabId : this._activeTab);
        if(tabInstance) 
            tabInstance.triggerEvent({
                type : eventType
            }, timeout);
    },

    refreshTab: function (tabId) {
        this._triggerTabEvent("onRefresh", tabId);
    },

    onResize: function(tabId) {
        this._triggerTabEvent("onResize", tabId, 500);
    },

    onLeave: function() {
        this._triggerTabEvent("onLeave", null);
    },

    onReenter: function() {
        this._triggerTabEvent("onActive", null);
    },

    destroy: function() {
        for(var tabId in this._tabDetails) {
            this._triggerTabEvent("onClose", tabId);
            delete this._tabDetails[tabId];
        }
    },

    getHelpId: function (tabId) {
        var tabInstance = this.getTabInstance(tabId ? tabId : this._activeTab);
        if(tabInstance)
            tabInstance.getHelpId();
    }
});