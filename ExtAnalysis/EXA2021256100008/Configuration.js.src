$.Class("infa.eic.crextension.configuration", {
    initializeEICConfiguration: function (parameters) {
        var deferred = $.Deferred();

        if (parameters) {
            for (key in parameters) {
                infa.extension.eicConfiguration.setParameter(key, parameters[key]);
            }
            deferred.resolve();
        } else {
            chrome.storage.sync.get(["user", "password", "namespace", 'showSearch', "tableauObject", "eicUrl"], function (result) {

                infa.extension.eicConfiguration.setParameter("user", result.user);
                infa.extension.eicConfiguration.setParameter("password", result.password);
                infa.extension.eicConfiguration.setParameter("URL", result.eicUrl);
                infa.extension.eicConfiguration.setParameter("namespace", result.namespace);
                infa.extension.eicConfiguration.setParameter("tableauObject", result.tableauObject);
                infa.extension.eicConfiguration.setParameter("showSearch", result.showSearch);

                deferred.resolve();
            })
        }
        return deferred.promise();
    }
}, {
    init: function (data) {
        this.container = data.renderTo;
        this.renderUI();
    },

    renderUI: function () {
        var self = this;
        var loginProgress = false;
        loadLoginPage = function () {
            var deferred = $.Deferred();
            var loadedTemplate = $.loadTemplate(chrome.extension.getURL("res/tmpl/login.htm"));
            loadedTemplate.then(function (template) {
                executableTemplate = $.tmpl(template, {
                    eicURL: true
                });
                self.container.append(executableTemplate);
                deferred.resolve();
            })
            return deferred.promise();
        }

        function getNamespaces(eicUrl) {
            var deferred = $.Deferred();
            $.backGroundAjax(eicUrl + "/web.ldm.listnamespaces", {}, "POST").then(function (responseText) {
                responseText = JSON.parse(responseText);
                if(Array.isArray(responseText)){
                    deferred.resolve(responseText); 
                  }else{
                    deferred.resolve(responseText.namespaces);
                  }
            })
            return deferred.promise();
        }

        function listnamespaces(self, selected) {
            var form = $(self).parents('.login-container');
            var eicUrl = form.find("#eicUrl input").val();

            getNamespaces(eicUrl).done(function (namespaces) {

                form.find("#namespace select").empty();
                namespaces.forEach(function (namespace) {
                    form.find("#namespace select").append($("<option/>", {
                        value: namespace,
                        text: namespace,
                        selected: selected == namespace
                    }));
                })
            });
        }
        loadLoginPage().done(function () {

            chrome.storage.sync.get(["user", "password", "namespace", "eicUrl", "namespaces", "rememberMe"], function (result) {
                self.container.find(".infaTileContent #user input").val(result.user);
                self.container.find(".infaTileContent #password input").val(result.password);
                self.container.find(".infaTileContent #eicUrl input").val(result.eicUrl);
                if (result.eicUrl != "") {
                    listnamespaces(self.container.find(".infaTileContent #eicUrl input"), result.namespace)
                }
            });

            self.container.find(".infaTileContent #eicUrl input").blur(function () {
                listnamespaces(this);
            });
            self.container.find('.loginBtn').html("Save").on("click", function () {
                var form = $(this).parents('.login-container');
                var errorDiv = form.find(".msg").addClass("error");
                var user = form.find("#user input").val(),
                    password = form.find("#password input").val(),
                    namespace = form.find("#namespace option:selected").val(),
                    eicUrl = form.find("#eicUrl input").val(),
                    parameters = {
                        "user": user,
                        "password": password,
                        "namespace": namespace,
                        "eicUrl": eicUrl
                    }
                var rememberCredentials = form.find(".rememberCredentials").is(':checked');
                errorDiv.hide();

                // errorDiv.hide();
                if (!eicUrl) {
                    errorDiv.text("EDC url cannot be left blank").show();
                    return;
                } else if ((user == "" || password == "") && rememberCredentials) {
                    errorDiv.text("Credentials cannot be left blank").show();
                    return;
                } else if ((user == "" || password == "")) {
                    infa.Eic.session.doLogout(parameters).done(function (responseText) {

                        if (responseText == "error") {

                        }
                        if (responseText.error) {
                            errorDiv.addClass("error").text(responseText.error).show();
                            return;
                        }
                    });
                } else if (namespace == "") {
                    errorDiv.text("Security Domain cannot be left blank").show();
                    return;
                } else if (user && password && !loginProgress) {
                    loginProgress = true;
                    if(eicUrl.slice(-1) == "/"){
                        eicUrl = eicUrl.slice(0, -1); 
                    }
                    isValidUrl(eicUrl).done(function () {
                        var parameters = {
                            "user": user,
                            "password": password,
                            "namespace": namespace
                        }
                        infa.Eic.session.doLogin(parameters, eicUrl).done(function (responseText) {

                            if (responseText == "error") {
                                loginProgress = false;
                            }
                            if (responseText.error) {
                                errorDiv.addClass("error").text(responseText.error).show();
                                loginProgress = false;
                                return;
                            }
                            if (responseText != "") {
                                $.blockContainer('.tilePage.eic-presence');
                                var data = {
                                    action: "cacheEICConfiguration",
                                    user: '',
                                    password: '',
                                    namespace: namespace,
                                    eicUrl: eicUrl
                                }
                                if (rememberCredentials) {
                                    data.user = user;
                                    data.password = password;
                                }
                                chrome.extension.sendMessage(data);
                                infa.eic.crextension.configuration.initializeEICConfiguration(parameters);
                                setTimeout(function () {
                                    window.postMessage("updateEICIframeContent", '*');
                                    loginProgress = false;
                                }, 100)

                                return;
                            }
                        });
                    }).fail(function () {
                        $(".msg").addClass("error").text("Enter a valid EDC URL").show();
                    });
                }

                function isUrlValid(eicUrl) {
                    var r = new RegExp(/(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/);
                    return r.test(eicUrl);
                }

                function isValidUrl(eicUrl) {
                    var deferred = $.Deferred();
                    arr = eicUrl.split("/");

                    if (!isUrlValid(eicUrl) || (arr.length > 4 && arr[4] !== "")) {
                        deferred.reject();
                    } else {
                        $.backGroundAjax(eicUrl + "/extension.eic.pingService").then(function (data) {
                            if (data === "error") {
                                deferred.reject();
                                loginProgress = false;
                            } else {
                                deferred.resolve();
                            }
                        });
                        return deferred.promise();
                    }
                }
            });
        });
    }
});