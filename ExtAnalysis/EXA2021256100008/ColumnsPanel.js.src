infaw.ldm.threeSixty.abstractPanel.extend('infaw.ldm.threeSixty.columnsPanel', {}, {

    maxDisplayColCount: 5,

    beforeRender: function () {
        this._dataElementsDetails = null;
        var self = this;
        return this.getDataElements().done(function (data) {
            self._dataElementsDetails = data;
        });
    },

    getDataElements: function () {
        var objectInfo = this.getObjectInfo(),
            allObjects = objectInfo.getDestObjects(),
            deferred = $.Deferred();

        if (allObjects && allObjects.length > 0) {
            this
                .getDataElementDetails(allObjects)
                .done(function (elemToShow) {
                    deferred.resolve({
                        elements: elemToShow,
                        totalCount: allObjects.length
                    });
                }).fail(function () {
                    deferred.reject();
                });
        } else {
            deferred.reject();
        }

        return deferred.promise();
    },

    _fetchQuery: function (identities) {
        var query = "";
        $.each(identities, function (index, identity) {
            query += "id=" + RISON.urlencode(identity) + "&";
        });
        return query;
    },

    getDataElementDetails: function (allObjects) {
        var deferred = $.Deferred(),
            size = allObjects.length > this.maxDisplayColCount ? this.maxDisplayColCount : allObjects.length,
            query = this._fetchQuery(allObjects.length > this.maxDisplayColCount ? allObjects.splice(this.maxDisplayColCount) : allObjects);

        $.blockGetJSON('/web.ldm.360.fetch?&' + query + 'links=NONE', null, null, -1)
            .then(function (currentResults) {
                var ldmObjects = [];
                if (currentResults && currentResults.items) {
                    var idsAdded = {};
                    $.each(currentResults, function (i, item) {
                        if (!idsAdded[item.id]) {
                            ldmObjects.push(item.id, item);
                            idsAdded[item.id] = true;
                        }
                    });
                }
                ldmObjects.length > 0 ? deferred.resolve(ldmObjects) : deferred.reject();
            }).fail(function (jqXHR, textStatus, errorThrown) {
                infaw.shell.common.Utils.showErrorFromResponse(infa.ldm.Utils.getErrorMessage(jqXHR, textStatus, errorThrown));
                deferred.reject();
            });

        return deferred.promise();
    },

    sortDataElements: function (dataElems, sortBy) {
        var dataElemsName = [],
            sortedDataElems = [],
            queryString = "q=(\"" + dataElems.join("\" \"") + "\")&qf=id&fl=id&fl=core.name&pageSize=" + dataElems.length;

        $.ajax({
            type: "POST",
            url: $.url("/web.ldm.search.search?"),
            async: false,
            data: queryString,
            contentType: 'application/json',
            datatype: "text"
        }).then(function (response) {

            response
                .items
                .forEach(function (eachElem) {
                    var sortBy = $.isFunction(sortBy) ? sortBy(eachElem) : eachElem[sortBy];
                    dataElemsName.push({
                        "name": i.values[0].value.toUpperCase(),
                        "id": i.id
                    });
                });

            dataElemsName.sort(function (obj1, obj2) {
                var ret = -1;
                if (obj1["name"] == obj2["name"]) {
                    ret = 0;
                } else if (obj1["name"] > obj2["name"]) {
                    ret = 1;
                }
                return ret;
            });
        }).fail(function () {});

        dataElemsName.forEach(function (obj, index) {
            sortedDataElems.push(obj.id);
        });

        return sortedDataElems.length === 0 ? dataElems : sortedDataElems;
    },

    setTitle: function (cntr) {
        this._columCountDiv = $("<div><span>Columns</span></div>");
        cntr.append(this._columCountDiv);
    },

    setColCount: function () {
        if (this._dataElementsDetails) {
            var elems = this._dataElementsDetails.elements,
                countSubstring = elems.length;
                
            if (this._dataElementsDetails.totalCount > this.maxDisplayColCount) {
                countSubstring = elems.length + "/" + this._dataElementsDetails.totalCount;
            }

            if(elems.length > 0){
                this._showAll.show();
            }else {
                this._showAll.hide();
            }

            var countClass = "colCount",
                countEle = $("<span>&nbsp;(" + countSubstring + ")</span>").addClass(countClass);

            this._columCountDiv
                .find("span." + countClass)
                .remove();
            this._columCountDiv.append(countEle);

        } else {
            this._showAll.hide();
        }
    },

    setActionsContent: function (actionsCntr) {
        var self = this;
        this._showAll = $('<div></div>')
            .addClass("iconBtn")
            .appendTo(actionsCntr)
            .infaButton({
                height: 24,
                label: "Show All"
            }).on('onSelect', function () {
                self.triggerEvent({
                    type: "openTab",
                    tabId: "ldm.DataElementsDetailsView"
                });
            })
        //.hide();
    },

    setPanelContent: function (panelCntr) {
        panelCntr.append("Columns panel content will go here");
        this.setColCount();
    }

});