class RemoteConfigHandler{constructor(t){this.store=t,this.syncWOTConfiguration=this.syncWOTConfiguration.bind(this)}async init(t){const e=this.store.getState().remoteConfig.meta,o=e.isDefaultConfig||t,i=e.refreshIntervalHours;setTimeout(this.syncWOTConfiguration,o?0:i*ONE_HOUR)}async syncWOTConfiguration(){let t=this.store.getState().remoteConfig.meta;try{const e=this.store.getState().remoteConfig.features,o=await fetch(STATIC_FILES_SERVER+"/v2/ui_config.json"),i=await o.json(),n=i.features;t=i.meta||t;const s=this.filterOutRemovedFeatures(e,n),r=Object.keys(n).reduce((t,o)=>{var i=n[o];const s=i.description,r=i.enable,a=i.forceReselect,c=i.version,u=i.options,f=new Feature(o,s,r,a,c,u),g=e[o];if(g&&g.version===f.version)return t;const h=!g||f.forceReselect;return f.options=[h?this.getRandomOption(f):this.getUpdatedOption(g,f)],t[o]=f,t},{});this.store.dispatch(updateRemoteUIConfigFeatures(s,r)),this.store.dispatch(updateRemoteUIConfigMeta(t))}catch(t){}setTimeout(this.syncWOTConfiguration,t.refreshIntervalHours*ONE_HOUR)}filterOutRemovedFeatures(t,e){return Object.keys(t).filter(t=>!e[t])}getRandomOption(t){const e=t.options.reduce((t,e)=>t+e.weightPercentage,0),o=Math.floor(Math.random()*e);let i=0;return t.options.find(t=>(i+=t.weightPercentage,o<i))}getUpdatedOption(t,e){const o=t.options[0].id;return e.options.find(t=>t.id===o)}}